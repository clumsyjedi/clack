{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name cljs.source-map, :imports nil, :requires {gobj goog.object, goog.object goog.object, string clojure.string, clojure.string clojure.string, set clojure.set, clojure.set clojure.set, base64-vlq cljs.source-map.base64-vlq, cljs.source-map.base64-vlq cljs.source-map.base64-vlq}, :uses nil, :defs {update-result {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/source_map.cljs", :line 130, :column 7, :end-line 130, :end-column 20, :arglists (quote ([result segmap gline])), :doc "Helper for decode. Take a source map and update it based on a\n  segment map."}, :name cljs.source-map/update-result, :variadic false, :file "out/cljs/source_map.cljs", :end-column 20, :method-params ([result segmap gline]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 3, :fn-var true, :arglists (quote ([result segmap gline])), :doc "Helper for decode. Take a source map and update it based on a\n  segment map."}, encode {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/source_map.cljs", :line 198, :column 7, :end-line 198, :end-column 13, :arglists (quote ([m opts])), :doc "Take an internal source map representation represented as nested\n   sorted maps of file, line, column and return a source map v3 JSON\n   string."}, :name cljs.source-map/encode, :variadic false, :file "out/cljs/source_map.cljs", :end-column 13, :method-params ([m opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m opts])), :doc "Take an internal source map representation represented as nested\n   sorted maps of file, line, column and return a source map v3 JSON\n   string."}, invert-reverse-map {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/source_map.cljs", :line 285, :column 7, :end-line 285, :end-column 25, :arglists (quote ([reverse-map])), :doc "Given a ClojureScript to JavaScript source map, invert it. Useful when\n   mapping JavaScript stack traces when environment support is unavailable."}, :name cljs.source-map/invert-reverse-map, :variadic false, :file "out/cljs/source_map.cljs", :end-column 25, :method-params ([reverse-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 285, :end-line 285, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reverse-map])), :doc "Given a ClojureScript to JavaScript source map, invert it. Useful when\n   mapping JavaScript stack traces when environment support is unavailable."}, decode {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/source_map.cljs", :line 145, :column 7, :end-line 145, :end-column 13, :arglists (quote ([source-map] [mappings source-map])), :doc "Convert a v3 source map JSON object into a source map mapping\n  generated JavaScript source locations to the original\n  ClojureScript.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([source-map] [mappings source-map]), :arglists ([source-map] [mappings source-map]), :arglists-meta (nil nil)}}, :name cljs.source-map/decode, :variadic false, :file "out/cljs/source_map.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([source-map] [mappings source-map]), :arglists ([source-map] [mappings source-map]), :arglists-meta (nil nil)}, :method-params ([source-map] [mappings source-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 2, :fn-var true, :arglists ([source-map] [mappings source-map]), :doc "Convert a v3 source map JSON object into a source map mapping\n  generated JavaScript source locations to the original\n  ClojureScript."}, seg->map {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/source_map.cljs", :line 53, :column 7, :end-line 53, :end-column 15, :arglists (quote ([seg source-map])), :doc "Take a source map segment represented as a vector\n   and return a map."}, :name cljs.source-map/seg->map, :variadic false, :file "out/cljs/source_map.cljs", :end-column 15, :method-params ([seg source-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 2, :fn-var true, :arglists (quote ([seg source-map])), :doc "Take a source map segment represented as a vector\n   and return a map."}, source-compare {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/source_map.cljs", :line 42, :column 7, :end-line 42, :end-column 21, :arglists (quote ([sources])), :doc "Take a seq of source file names and return a comparator\n   that can be used to construct a sorted map. For reverse\n   source maps."}, :name cljs.source-map/source-compare, :variadic false, :file "out/cljs/source_map.cljs", :end-column 21, :method-params ([sources]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sources])), :doc "Take a seq of source file names and return a comparator\n   that can be used to construct a sorted map. For reverse\n   source maps."}, decode-reverse {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/source_map.cljs", :line 99, :column 7, :end-line 99, :end-column 21, :arglists (quote ([source-map] [mappings source-map])), :doc "Convert a v3 source map JSON object into a reverse source map\n  mapping original ClojureScript source locations to the generated\n  JavaScript.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([source-map] [mappings source-map]), :arglists ([source-map] [mappings source-map]), :arglists-meta (nil nil)}}, :name cljs.source-map/decode-reverse, :variadic false, :file "out/cljs/source_map.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([source-map] [mappings source-map]), :arglists ([source-map] [mappings source-map]), :arglists-meta (nil nil)}, :method-params ([source-map] [mappings source-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 2, :fn-var true, :arglists ([source-map] [mappings source-map]), :doc "Convert a v3 source map JSON object into a reverse source map\n  mapping original ClojureScript source locations to the generated\n  JavaScript."}, lines->segs {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/source_map.cljs", :line 175, :column 7, :end-line 175, :end-column 18, :arglists (quote ([lines])), :doc "Take a nested sorted map encoding line and column information\n   for a file and return a vector of vectors of encoded segments.\n   Each vector represents a line, and the internal vectors are segments\n   representing the contents of the line."}, :name cljs.source-map/lines->segs, :variadic false, :file "out/cljs/source_map.cljs", :end-column 18, :method-params ([lines]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 1, :fn-var true, :arglists (quote ([lines])), :doc "Take a nested sorted map encoding line and column information\n   for a file and return a vector of vectors of encoded segments.\n   Each vector represents a line, and the internal vectors are segments\n   representing the contents of the line."}, merge-source-maps {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/source_map.cljs", :line 258, :column 7, :end-line 258, :end-column 24, :arglists (quote ([cljs-map js-map])), :doc "Merge an internal source map representation of a single\n   ClojureScript file mapping original to generated with a\n   second source map mapping original JS to generated JS.\n   The is to support source maps that work through multiple\n   compilation steps like Google Closure optimization passes."}, :name cljs.source-map/merge-source-maps, :variadic false, :file "out/cljs/source_map.cljs", :end-column 24, :method-params ([cljs-map js-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 258, :end-line 258, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cljs-map js-map])), :doc "Merge an internal source map representation of a single\n   ClojureScript file mapping original to generated with a\n   second source map mapping original JS to generated JS.\n   The is to support source maps that work through multiple\n   compilation steps like Google Closure optimization passes."}, update-reverse-result {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/source_map.cljs", :line 81, :column 7, :end-line 81, :end-column 28, :arglists (quote ([result segmap gline])), :doc "Helper for decode-reverse. Take a reverse source map and\n  update it with a segment map."}, :name cljs.source-map/update-reverse-result, :variadic false, :file "out/cljs/source_map.cljs", :end-column 28, :method-params ([result segmap gline]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 3, :fn-var true, :arglists (quote ([result segmap gline])), :doc "Helper for decode-reverse. Take a reverse source map and\n  update it with a segment map."}, indexed-sources {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/source_map.cljs", :line 34, :column 7, :end-line 34, :end-column 22, :arglists (quote ([sources])), :doc "Take a seq of source file names and return a map from\n   file number to integer index. For reverse source maps."}, :name cljs.source-map/indexed-sources, :variadic false, :file "out/cljs/source_map.cljs", :end-column 22, :method-params ([sources]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sources])), :doc "Take a seq of source file names and return a map from\n   file number to integer index. For reverse source maps."}, seg-combine {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/source_map.cljs", :line 65, :column 7, :end-line 65, :end-column 18, :arglists (quote ([seg relseg])), :doc "Combine a source map segment vector and a relative\n   source map segment vector and combine them to get\n   an absolute segment posititon information as a vector."}, :name cljs.source-map/seg-combine, :variadic false, :file "out/cljs/source_map.cljs", :end-column 18, :method-params ([seg relseg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 2, :fn-var true, :arglists (quote ([seg relseg])), :doc "Combine a source map segment vector and a relative\n   source map segment vector and combine them to get\n   an absolute segment posititon information as a vector."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:gline :name :file :lines :source :preamble-line-count :source-map-timestamp :line :col :gcol :sources-content}, :order [:gcol :source :line :col :name :gline :preamble-line-count :file :source-map-timestamp :lines :sources-content]}, :doc nil}