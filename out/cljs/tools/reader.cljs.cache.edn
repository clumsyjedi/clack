;; Analyzed by ClojureScript 1.8.41
{:use-macros {log-source cljs.tools.reader.reader-types}, :excludes #{char *suppress-read* *default-data-reader-fn* read default-data-readers *data-readers* read-line read-string}, :name cljs.tools.reader, :imports {StringBuffer goog.string.StringBuffer}, :requires {cljs.tools.reader.impl.commons cljs.tools.reader.impl.commons, gstring goog.string, goog.string goog.string, garray goog.array, cljs.tools.reader.reader-types cljs.tools.reader.reader-types, StringBuffer goog.string.StringBuffer, cljs.tools.reader.impl.utils cljs.tools.reader.impl.utils, string clojure.string, clojure.string clojure.string, goog.array goog.array}, :uses {match-number cljs.tools.reader.impl.commons, reader-conditional cljs.tools.reader.impl.utils, whitespace? cljs.tools.reader.impl.utils, read-comment cljs.tools.reader.impl.commons, char cljs.tools.reader.impl.utils, numeric? cljs.tools.reader.impl.utils, reader-error cljs.tools.reader.reader-types, ReaderConditional cljs.tools.reader.impl.utils, unread cljs.tools.reader.reader-types, peek-char cljs.tools.reader.reader-types, parse-symbol cljs.tools.reader.impl.commons, desugar-meta cljs.tools.reader.impl.utils, next-id cljs.tools.reader.impl.utils, number-literal? cljs.tools.reader.impl.commons, read-past cljs.tools.reader.impl.commons, indexing-reader? cljs.tools.reader.reader-types, read-char cljs.tools.reader.reader-types, get-column-number cljs.tools.reader.reader-types, ex-info? cljs.tools.reader.impl.utils, get-file-name cljs.tools.reader.reader-types, reader-conditional? cljs.tools.reader.impl.utils, throwing-reader cljs.tools.reader.impl.commons, string-push-back-reader cljs.tools.reader.reader-types, get-line-number cljs.tools.reader.reader-types}, :defs {NO_MATCH {:name cljs.tools.reader/NO_MATCH, :file "out/cljs/tools/reader.cljs", :line 474, :column 1, :end-line 474, :end-column 28, :private true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 474, :column 20, :end-line 474, :end-column 28, :private true}}, READ_EOF {:name cljs.tools.reader/READ_EOF, :file "out/cljs/tools/reader.cljs", :line 202, :column 1, :end-line 202, :end-column 28, :private true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 202, :column 20, :end-line 202, :end-column 28, :private true}}, unquote-splicing? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 623, :column 8, :end-line 623, :end-column 25, :private true, :arglists (quote ([form]))}, :private true, :name cljs.tools.reader/unquote-splicing?, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 25, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 623, :end-line 623, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, read-tagged {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 782, :column 8, :end-line 782, :end-column 19, :private true, :arglists (quote ([rdr initch opts pending-forms]))}, :private true, :name cljs.tools.reader/read-tagged, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 19, :method-params ([rdr initch opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 782, :end-line 782, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr initch opts pending-forms]))}, starting-line-col-info {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 194, :column 8, :end-line 194, :end-column 30, :private true, :arglists (quote ([rdr]))}, :private true, :name cljs.tools.reader/starting-line-col-info, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 30, :method-params ([rdr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rdr]))}, wrapping-reader {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 391, :column 8, :end-line 391, :end-column 23, :private true, :arglists (quote ([sym])), :doc "Returns a function which wraps a reader in a call to sym"}, :private true, :name cljs.tools.reader/wrapping-reader, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 23, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 391, :end-line 391, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym])), :doc "Returns a function which wraps a reader in a call to sym"}, read-meta {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 397, :column 8, :end-line 397, :end-column 17, :private true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read metadata and return the following object with the metadata applied"}, :private true, :name cljs.tools.reader/read-meta, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 17, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 397, :end-line 397, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read metadata and return the following object with the metadata applied"}, read-unicode-char {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 108, :column 8, :end-line 108, :end-column 25, :private true, :arglists (quote ([token offset length base] [rdr initch base length exact?])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([token offset length base] [rdr initch base length exact?]), :arglists ([token offset length base] [rdr initch base length exact?]), :arglists-meta (nil nil)}}, :private true, :name cljs.tools.reader/read-unicode-char, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([token offset length base] [rdr initch base length exact?]), :arglists ([token offset length base] [rdr initch base length exact?]), :arglists-meta (nil nil)}, :method-params ([token offset length base] [rdr initch base length exact?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 5, :fn-var true, :arglists ([token offset length base] [rdr initch base length exact?])}, char-code {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 102, :column 8, :end-line 102, :end-column 17, :private true, :arglists (quote ([ch base]))}, :private true, :name cljs.tools.reader/char-code, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 17, :method-params ([ch base]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ch base]))}, read-unmatched-delimiter {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 77, :column 8, :end-line 77, :end-column 32, :private true, :arglists (quote ([rdr ch opts pending-forms]))}, :private true, :name cljs.tools.reader/read-unmatched-delimiter, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 32, :method-params ([rdr ch opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr ch opts pending-forms]))}, read-fn {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 555, :column 8, :end-line 555, :end-column 15, :private true, :arglists (quote ([rdr _ opts pending-forms]))}, :private true, :name cljs.tools.reader/read-fn, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 15, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 555, :end-line 555, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms]))}, syntax-quote* {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 698, :column 8, :end-line 698, :end-column 21, :private true, :arglists (quote ([form]))}, :private true, :name cljs.tools.reader/syntax-quote*, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 21, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 698, :end-line 698, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, bool? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 688, :column 7, :end-line 688, :end-column 12, :arglists (quote ([x]))}, :name cljs.tools.reader/bool?, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 688, :end-line 688, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, arg-env {:name cljs.tools.reader/arg-env, :file "out/cljs/tools/reader.cljs", :line 547, :column 1, :end-line 547, :end-column 33, :dynamic true, :private true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 547, :column 26, :end-line 547, :end-column 33, :dynamic true, :private true}}, read-suppress {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 465, :column 8, :end-line 465, :end-column 21, :private true, :arglists (quote ([first-line rdr opts pending-forms])), :doc "Read next form and suppress. Return nil or READ_FINISHED."}, :private true, :name cljs.tools.reader/read-suppress, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 21, :method-params ([first-line rdr opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 465, :end-line 465, :max-fixed-arity 4, :fn-var true, :arglists (quote ([first-line rdr opts pending-forms])), :doc "Read next form and suppress. Return nil or READ_FINISHED."}, *suppress-read* {:name cljs.tools.reader/*suppress-read*, :file "out/cljs/tools/reader.cljs", :line 813, :column 1, :end-line 813, :end-column 31, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 813, :column 16, :end-line 813, :end-column 31, :dynamic true}}, flatten-map {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 645, :column 8, :end-line 645, :end-column 19, :private true, :arglists (quote ([form])), :doc "Flatten a map into a seq of alternate keys and values"}, :private true, :name cljs.tools.reader/flatten-map, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 19, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 645, :end-line 645, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form])), :doc "Flatten a map into a seq of alternate keys and values"}, *default-data-reader-fn* {:name cljs.tools.reader/*default-data-reader-fn*, :file "out/cljs/tools/reader.cljs", :line 806, :column 1, :end-line 806, :end-column 40, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 806, :column 16, :end-line 806, :end-column 40, :dynamic true}, :doc "When no data reader is found for a tag and *default-data-reader-fn*\n  is non-nil, it will be called with two arguments, the tag and the value.\n  If *default-data-reader-fn* is nil (the default value), an exception\n  will be thrown for the unknown tag."}, read {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 869, :column 7, :end-line 869, :end-column 11, :arglists (quote ([] [reader] [opts reader] [reader eof-error? eof-value])), :doc "Reads the first object from an IPushbackReader or a java.io.PushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true.\n   Otherwise returns sentinel. If no stream is providen, *in* will be used.\n\n   Opts is a persistent map with valid keys:\n    :read-cond - :allow to process reader conditionals, or\n                 :preserve to keep all branches\n    :features - persistent set of feature keywords for reader conditionals\n    :eof - on eof, return value unless :eofthrow, then throw.\n           if not specified, will throw\n\n   To read data structures only, use clojure.tools.reader.edn/read\n\n   Note that the function signature of clojure.tools.reader/read and\n   clojure.tools.reader.edn/read is not the same for eof-handling", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([reader] [{eof :eof, :as opts, :or {eof :eofthrow}} reader] [reader eof-error? sentinel]), :arglists ([reader] [{eof :eof, :as opts, :or {eof :eofthrow}} reader] [reader eof-error? sentinel]), :arglists-meta (nil nil nil)}}, :name cljs.tools.reader/read, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([reader] [{eof :eof, :as opts, :or {eof :eofthrow}} reader] [reader eof-error? sentinel]), :arglists ([reader] [{eof :eof, :as opts, :or {eof :eofthrow}} reader] [reader eof-error? sentinel]), :arglists-meta (nil nil nil)}, :method-params ([reader] [{eof :eof, :as opts, :or {eof :eofthrow}} reader] [reader eof-error? sentinel]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 869, :end-line 869, :max-fixed-arity 3, :fn-var true, :arglists ([reader] [{eof :eof, :as opts, :or {eof :eofthrow}} reader] [reader eof-error? sentinel]), :doc "Reads the first object from an IPushbackReader or a java.io.PushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true.\n   Otherwise returns sentinel. If no stream is providen, *in* will be used.\n\n   Opts is a persistent map with valid keys:\n    :read-cond - :allow to process reader conditionals, or\n                 :preserve to keep all branches\n    :features - persistent set of feature keywords for reader conditionals\n    :eof - on eof, return value unless :eofthrow, then throw.\n           if not specified, will throw\n\n   To read data structures only, use clojure.tools.reader.edn/read\n\n   Note that the function signature of clojure.tools.reader/read and\n   clojure.tools.reader.edn/read is not the same for eof-handling"}, read-set {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 415, :column 8, :end-line 415, :end-column 16, :private true, :arglists (quote ([rdr _ opts pending-forms]))}, :private true, :name cljs.tools.reader/read-set, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 16, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 415, :end-line 415, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms]))}, read-symbol {:name cljs.tools.reader/read-symbol, :file "out/cljs/tools/reader.cljs", :line 588, :column 1, :end-line 588, :end-column 21, :declared true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 588, :column 10, :end-line 588, :end-column 21, :declared true}}, read-unquote {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 614, :column 8, :end-line 614, :end-column 20, :private true, :arglists (quote ([rdr comma opts pending-forms]))}, :private true, :name cljs.tools.reader/read-unquote, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 20, :method-params ([rdr comma opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 614, :end-line 614, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr comma opts pending-forms]))}, read-map {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 260, :column 8, :end-line 260, :end-column 16, :private true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read in a map, including its location if the reader is an indexing reader"}, :private true, :name cljs.tools.reader/read-map, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 16, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 260, :end-line 260, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read in a map, including its location if the reader is an indexing reader"}, read*-internal {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 820, :column 8, :end-line 820, :end-column 22, :private true, :arglists (quote ([reader eof-error? sentinel return-on opts pending-forms]))}, :private true, :name cljs.tools.reader/read*-internal, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 22, :method-params ([reader eof-error? sentinel return-on opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 820, :end-line 820, :max-fixed-arity 6, :fn-var true, :arglists (quote ([reader eof-error? sentinel return-on opts pending-forms]))}, unquote? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 627, :column 8, :end-line 627, :end-column 16, :private true, :arglists (quote ([form]))}, :private true, :name cljs.tools.reader/unquote?, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 16, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 627, :end-line 627, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, default-data-readers {:name cljs.tools.reader/default-data-readers, :file "out/cljs/tools/reader.cljs", :line 815, :column 1, :end-line 815, :end-column 26, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 815, :column 6, :end-line 815, :end-column 26}, :doc "Default map of data reader functions provided by Clojure.\n  May be overridden by binding *data-readers*"}, macros {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 747, :column 8, :end-line 747, :end-column 14, :private true, :arglists (quote ([ch]))}, :private true, :name cljs.tools.reader/macros, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 14, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 747, :end-line 747, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ch]))}, read-arg {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 590, :column 8, :end-line 590, :end-column 16, :private true, :arglists (quote ([rdr pct opts pending-forms]))}, :private true, :name cljs.tools.reader/read-arg, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 16, :method-params ([rdr pct opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 590, :end-line 590, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr pct opts pending-forms]))}, match-feature {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 476, :column 8, :end-line 476, :end-column 21, :private true, :arglists (quote ([first-line rdr opts pending-forms])), :doc "Read next feature. If matched, read next form and return.\n   Otherwise, read and skip next form, returning READ_FINISHED or nil."}, :private true, :name cljs.tools.reader/match-feature, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 21, :method-params ([first-line rdr opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 476, :end-line 476, :max-fixed-arity 4, :fn-var true, :arglists (quote ([first-line rdr opts pending-forms])), :doc "Read next feature. If matched, read next form and return.\n   Otherwise, read and skip next form, returning READ_FINISHED or nil."}, read-syntax-quote {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 741, :column 8, :end-line 741, :end-column 25, :private true, :arglists (quote ([rdr backquote opts pending-forms]))}, :private true, :name cljs.tools.reader/read-syntax-quote, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 25, :method-params ([rdr backquote opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 741, :end-line 741, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr backquote opts pending-forms]))}, READ_FINISHED {:name cljs.tools.reader/READ_FINISHED, :file "out/cljs/tools/reader.cljs", :line 203, :column 1, :end-line 203, :end-column 33, :private true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 203, :column 20, :end-line 203, :end-column 33, :private true}}, read-list {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 226, :column 8, :end-line 226, :end-column 17, :private true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read in a list, including its location if the reader is an indexing reader"}, :private true, :name cljs.tools.reader/read-list, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 17, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read in a list, including its location if the reader is an indexing reader"}, read-cond-delimited {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 495, :column 8, :end-line 495, :end-column 27, :private true, :arglists (quote ([rdr splicing opts pending-forms]))}, :private true, :name cljs.tools.reader/read-cond-delimited, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 27, :method-params ([rdr splicing opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 495, :end-line 495, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr splicing opts pending-forms]))}, RESERVED_FEATURES {:name cljs.tools.reader/RESERVED_FEATURES, :file "out/cljs/tools/reader.cljs", :line 438, :column 1, :end-line 438, :end-column 33, :private true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 438, :column 16, :end-line 438, :end-column 33, :private true}}, dispatch-macros {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 768, :column 8, :end-line 768, :end-column 23, :private true, :arglists (quote ([ch]))}, :private true, :name cljs.tools.reader/dispatch-macros, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 23, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 768, :end-line 768, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ch]))}, read* {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 842, :column 8, :end-line 842, :end-column 13, :private true, :arglists (quote ([reader eof-error? sentinel opts pending-forms] [reader eof-error? sentinel return-on opts pending-forms])), :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([reader eof-error? sentinel opts pending-forms] [reader eof-error? sentinel return-on opts pending-forms]), :arglists ([reader eof-error? sentinel opts pending-forms] [reader eof-error? sentinel return-on opts pending-forms]), :arglists-meta (nil nil)}}, :private true, :name cljs.tools.reader/read*, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([reader eof-error? sentinel opts pending-forms] [reader eof-error? sentinel return-on opts pending-forms]), :arglists ([reader eof-error? sentinel opts pending-forms] [reader eof-error? sentinel return-on opts pending-forms]), :arglists-meta (nil nil)}, :method-params ([reader eof-error? sentinel opts pending-forms] [reader eof-error? sentinel return-on opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 842, :end-line 842, :max-fixed-arity 6, :fn-var true, :arglists ([reader eof-error? sentinel opts pending-forms] [reader eof-error? sentinel return-on opts pending-forms])}, *data-readers* {:name cljs.tools.reader/*data-readers*, :file "out/cljs/tools/reader.cljs", :line 799, :column 1, :end-line 799, :end-column 30, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 799, :column 16, :end-line 799, :end-column 30, :dynamic true}, :doc "Map from reader tag symbols to data reader Vars.\n  Reader tags without namespace qualifiers are reserved for Clojure.\n  This light version of tools.reader has no implementation for default\n  reader tags such as #inst and #uuid."}, syntax-quote-coll {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 673, :column 8, :end-line 673, :end-column 25, :private true, :arglists (quote ([type coll]))}, :private true, :name cljs.tools.reader/syntax-quote-coll, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 25, :method-params ([type coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 673, :end-line 673, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type coll]))}, *read-delim* {:name cljs.tools.reader/*read-delim*, :file "out/cljs/tools/reader.cljs", :line 205, :column 1, :end-line 205, :end-column 28, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 205, :column 16, :end-line 205, :end-column 28, :dynamic true}}, resolve-symbol {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 693, :column 17, :end-line 693, :end-column 31, :dynamic true, :arglists (quote ([s])), :doc "Resolve a symbol s into its fully qualified namespace version"}, :name cljs.tools.reader/resolve-symbol, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 31, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 693, :end-line 693, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Resolve a symbol s into its fully qualified namespace version"}, read-delimited {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 220, :column 8, :end-line 220, :end-column 22, :private true, :arglists (quote ([delim rdr opts pending-forms])), :doc "Reads and returns a collection ended with delim"}, :private true, :name cljs.tools.reader/read-delimited, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 22, :method-params ([delim rdr opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 220, :end-line 220, :max-fixed-arity 4, :fn-var true, :arglists (quote ([delim rdr opts pending-forms])), :doc "Reads and returns a collection ended with delim"}, read-token {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 48, :column 8, :end-line 48, :end-column 18, :private true, :arglists (quote ([rdr initch])), :doc "Read in a single logical token from the reader"}, :private true, :name cljs.tools.reader/read-token, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 18, :method-params ([rdr initch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr initch])), :doc "Read in a single logical token from the reader"}, read-cond {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 525, :column 8, :end-line 525, :end-column 17, :private true, :arglists (quote ([rdr _ opts pending-forms]))}, :private true, :name cljs.tools.reader/read-cond, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 17, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 525, :end-line 525, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms]))}, upper-limit {:name cljs.tools.reader/upper-limit, :file "out/cljs/tools/reader.cljs", :line 145, :column 1, :end-line 145, :end-column 35, :const true, :private true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 145, :column 24, :end-line 145, :end-column 35, :const true, :private true}}, loc-info {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 326, :column 8, :end-line 326, :end-column 16, :private true, :arglists (quote ([rdr line column]))}, :private true, :name cljs.tools.reader/loc-info, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 16, :method-params ([rdr line column]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 326, :end-line 326, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr line column]))}, gensym-env {:name cljs.tools.reader/gensym-env, :file "out/cljs/tools/reader.cljs", :line 612, :column 1, :end-line 612, :end-column 36, :dynamic true, :private true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 612, :column 26, :end-line 612, :end-column 36, :dynamic true, :private true}}, *alias-map* {:name cljs.tools.reader/*alias-map*, :file "out/cljs/tools/reader.cljs", :line 359, :column 1, :end-line 359, :end-column 27, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 359, :column 16, :end-line 359, :end-column 27, :dynamic true}, :doc "Map from ns alias to ns, if non-nil, it will be used to resolve read-time\n   ns aliases.\n\n   Defaults to nil"}, read-regex {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 85, :column 7, :end-line 85, :end-column 17, :arglists (quote ([rdr ch opts pending-forms]))}, :name cljs.tools.reader/read-regex, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 17, :method-params ([rdr ch opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr ch opts pending-forms]))}, sb {:name cljs.tools.reader/sb, :file "out/cljs/tools/reader.cljs", :line 46, :column 1, :end-line 46, :end-column 8, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 46, :column 6, :end-line 46, :end-column 8}}, read-dispatch {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 69, :column 8, :end-line 69, :end-column 21, :private true, :arglists (quote ([rdr _ opts pending-forms]))}, :private true, :name cljs.tools.reader/read-dispatch, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 21, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms]))}, check-eof-error {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 446, :column 8, :end-line 446, :end-column 23, :private true, :arglists (quote ([form rdr first-line]))}, :private true, :name cljs.tools.reader/check-eof-error, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 23, :method-params ([form rdr first-line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 446, :end-line 446, :max-fixed-arity 3, :fn-var true, :arglists (quote ([form rdr first-line]))}, check-invalid-read-cond {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 458, :column 8, :end-line 458, :end-column 31, :private true, :arglists (quote ([form rdr first-line]))}, :private true, :name cljs.tools.reader/check-invalid-read-cond, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 31, :method-params ([form rdr first-line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 458, :end-line 458, :max-fixed-arity 3, :fn-var true, :arglists (quote ([form rdr first-line]))}, read-string {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 890, :column 7, :end-line 890, :end-column 18, :arglists (quote ([s] [opts s])), :doc "Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   To read data structures only, use clojure.tools.reader.edn/read-string\n\n   Note that the function signature of clojure.tools.reader/read-string and\n   clojure.tools.reader.edn/read-string is not the same for eof-handling", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [opts s]), :arglists ([s] [opts s]), :arglists-meta (nil nil)}}, :name cljs.tools.reader/read-string, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [opts s]), :arglists ([s] [opts s]), :arglists-meta (nil nil)}, :method-params ([s] [opts s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 890, :end-line 890, :max-fixed-arity 2, :fn-var true, :arglists ([s] [opts s]), :doc "Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   To read data structures only, use clojure.tools.reader.edn/read-string\n\n   Note that the function signature of clojure.tools.reader/read-string and\n   clojure.tools.reader.edn/read-string is not the same for eof-handling"}, check-reserved-features {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 453, :column 8, :end-line 453, :end-column 31, :private true, :arglists (quote ([rdr form]))}, :private true, :name cljs.tools.reader/check-reserved-features, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 31, :method-params ([rdr form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 453, :end-line 453, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr form]))}, has-feature? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 440, :column 8, :end-line 440, :end-column 20, :private true, :arglists (quote ([rdr feature opts]))}, :private true, :name cljs.tools.reader/has-feature?, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 20, :method-params ([rdr feature opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 440, :end-line 440, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr feature opts]))}, valid-octal? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 148, :column 8, :end-line 148, :end-column 20, :private true, :arglists (quote ([token base]))}, :private true, :name cljs.tools.reader/valid-octal?, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 20, :method-params ([token base]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 2, :fn-var true, :arglists (quote ([token base]))}, escape-char {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 293, :column 8, :end-line 293, :end-column 19, :private true, :arglists (quote ([sb rdr]))}, :private true, :name cljs.tools.reader/escape-char, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 19, :method-params ([sb rdr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 293, :end-line 293, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sb rdr]))}, read-char* {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 151, :column 8, :end-line 151, :end-column 18, :private true, :arglists (quote ([rdr backslash opts pending-forms])), :doc "Read in a character literal"}, :private true, :name cljs.tools.reader/read-char*, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 18, :method-params ([rdr backslash opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr backslash opts pending-forms])), :doc "Read in a character literal"}, resolve-ns {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 366, :column 8, :end-line 366, :end-column 18, :private true, :arglists (quote ([sym]))}, :private true, :name cljs.tools.reader/resolve-ns, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 18, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 366, :end-line 366, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, read-delimited-internal {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 207, :column 8, :end-line 207, :end-column 31, :private true, :arglists (quote ([delim rdr opts pending-forms]))}, :private true, :name cljs.tools.reader/read-delimited-internal, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 31, :method-params ([delim rdr opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 4, :fn-var true, :arglists (quote ([delim rdr opts pending-forms]))}, read-string* {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 314, :column 8, :end-line 314, :end-column 20, :private true, :arglists (quote ([reader _ opts pending-forms]))}, :private true, :name cljs.tools.reader/read-string*, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 20, :method-params ([reader _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 314, :end-line 314, :max-fixed-arity 4, :fn-var true, :arglists (quote ([reader _ opts pending-forms]))}, macro-terminating? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 41, :column 17, :end-line 41, :end-column 35, :tag boolean, :private true, :arglists (quote ([ch]))}, :private true, :name cljs.tools.reader/macro-terminating?, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 35, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :ret-tag boolean, :end-line 41, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([ch]))}, map-func {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 681, :column 7, :end-line 681, :end-column 15, :arglists (quote ([coll])), :doc "Decide which map type to use, array-map if less than 16 elements"}, :name cljs.tools.reader/map-func, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 15, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 681, :end-line 681, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Decide which map type to use, array-map if less than 16 elements"}, lower-limit {:name cljs.tools.reader/lower-limit, :file "out/cljs/tools/reader.cljs", :line 146, :column 1, :end-line 146, :end-column 35, :const true, :private true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 146, :column 24, :end-line 146, :end-column 35, :const true, :private true}}, ending-line-col-info {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 198, :column 8, :end-line 198, :end-column 28, :private true, :arglists (quote ([rdr]))}, :private true, :name cljs.tools.reader/ending-line-col-info, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 28, :method-params ([rdr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rdr]))}, register-arg {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 576, :column 8, :end-line 576, :end-column 20, :private true, :arglists (quote ([n])), :doc "Registers an argument to the arg-env"}, :private true, :name cljs.tools.reader/register-arg, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 20, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 576, :end-line 576, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Registers an argument to the arg-env"}, read-keyword {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 371, :column 8, :end-line 371, :end-column 20, :private true, :arglists (quote ([reader initch opts pending-forms]))}, :private true, :name cljs.tools.reader/read-keyword, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 20, :method-params ([reader initch opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 371, :end-line 371, :max-fixed-arity 4, :fn-var true, :arglists (quote ([reader initch opts pending-forms]))}, read-discard {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 432, :column 8, :end-line 432, :end-column 20, :private true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read and discard the first object from rdr"}, :private true, :name cljs.tools.reader/read-discard, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 20, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 432, :end-line 432, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read and discard the first object from rdr"}, garg {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 549, :column 8, :end-line 549, :end-column 12, :private true, :arglists (quote ([n])), :doc "Get a symbol for an anonymous ?argument?"}, :private true, :name cljs.tools.reader/garg, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 12, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 549, :end-line 549, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Get a symbol for an anonymous ?argument?"}, read-vector {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 244, :column 8, :end-line 244, :end-column 19, :private true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read in a vector, including its location if the reader is an indexing reader"}, :private true, :name cljs.tools.reader/read-vector, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 19, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 244, :end-line 244, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read in a vector, including its location if the reader is an indexing reader"}, read-number {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 282, :column 8, :end-line 282, :end-column 19, :private true, :arglists (quote ([rdr initch]))}, :private true, :name cljs.tools.reader/read-number, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 19, :method-params ([rdr initch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 282, :end-line 282, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr initch]))}, add-meta {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 667, :column 8, :end-line 667, :end-column 16, :private true, :arglists (quote ([form ret]))}, :private true, :name cljs.tools.reader/add-meta, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 16, :method-params ([form ret]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 667, :end-line 667, :max-fixed-arity 2, :fn-var true, :arglists (quote ([form ret]))}, register-gensym {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 656, :column 8, :end-line 656, :end-column 23, :private true, :arglists (quote ([sym]))}, :private true, :name cljs.tools.reader/register-gensym, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 23, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 656, :end-line 656, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, expand-list {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 631, :column 8, :end-line 631, :end-column 19, :private true, :arglists (quote ([s])), :doc "Expand a list by resolving its syntax quotes and unquotes"}, :private true, :name cljs.tools.reader/expand-list, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 631, :end-line 631, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Expand a list by resolving its syntax quotes and unquotes"}}, :require-macros {cljs.tools.reader.reader-types cljs.tools.reader.reader-types}, :cljs.analyzer/constants {:seen #{& :features clojure.core/list cljs.core/array-map :reader-exception :else cljs.core/hash-map cljs.core/apply :default :file cljs.core/concat :end-column :read-cond :type :preserve :source :illegal-argument cljs.core/with-meta :allow :sym :column :illegal-state clojure.core/unquote-splicing :line fn* clojure.core/deref / clojure.core/unquote :end-line cljs.core/vec cljs.core/sequence :unsupported-operation var quote :eof cljs.core/hash-set cljs.core/list :eofthrow :runtime-exception :none}, :order [:type :illegal-argument :else :file :line :column :end-line :end-column / :none :default :features :preserve :allow :read-cond :runtime-exception :illegal-state & fn* clojure.core/unquote-splicing clojure.core/unquote clojure.core/list :source cljs.core/with-meta cljs.core/concat cljs.core/sequence cljs.core/apply cljs.core/hash-map cljs.core/array-map :sym quote cljs.core/vec cljs.core/hash-set cljs.core/list :unsupported-operation clojure.core/deref var :reader-exception :eof :eofthrow]}, :doc "A clojure reader in clojure"}