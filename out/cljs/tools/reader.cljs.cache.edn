{:rename-macros {}, :renames {}, :use-macros {log-source cljs.tools.reader.reader-types}, :excludes #{char *suppress-read* *default-data-reader-fn* read default-data-readers *data-readers* read-line read-string}, :name cljs.tools.reader, :imports {StringBuffer goog.string.StringBuffer}, :requires {cljs.tools.reader.impl.commons cljs.tools.reader.impl.commons, gstring goog.string, goog.string goog.string, garray goog.array, cljs.tools.reader.reader-types cljs.tools.reader.reader-types, StringBuffer goog.string.StringBuffer, cljs.tools.reader.impl.utils cljs.tools.reader.impl.utils, string clojure.string, clojure.string clojure.string, goog.array goog.array}, :uses {match-number cljs.tools.reader.impl.commons, reader-conditional cljs.tools.reader.impl.utils, whitespace? cljs.tools.reader.impl.utils, read-comment cljs.tools.reader.impl.commons, char cljs.tools.reader.impl.utils, numeric? cljs.tools.reader.impl.utils, reader-error cljs.tools.reader.reader-types, ReaderConditional cljs.tools.reader.impl.utils, unread cljs.tools.reader.reader-types, peek-char cljs.tools.reader.reader-types, parse-symbol cljs.tools.reader.impl.commons, second' cljs.tools.reader.impl.utils, desugar-meta cljs.tools.reader.impl.utils, next-id cljs.tools.reader.impl.utils, number-literal? cljs.tools.reader.impl.commons, read-past cljs.tools.reader.impl.commons, indexing-reader? cljs.tools.reader.reader-types, read-char cljs.tools.reader.reader-types, get-column-number cljs.tools.reader.reader-types, ex-info? cljs.tools.reader.impl.utils, get-file-name cljs.tools.reader.reader-types, reader-conditional? cljs.tools.reader.impl.utils, throwing-reader cljs.tools.reader.impl.commons, string-push-back-reader cljs.tools.reader.reader-types, namespace-keys cljs.tools.reader.impl.utils, get-line-number cljs.tools.reader.reader-types}, :defs {NO_MATCH {:name cljs.tools.reader/NO_MATCH, :file "out/cljs/tools/reader.cljs", :line 493, :column 1, :end-line 493, :end-column 28, :private true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 493, :column 20, :end-line 493, :end-column 28, :private true}}, READ_EOF {:name cljs.tools.reader/READ_EOF, :file "out/cljs/tools/reader.cljs", :line 202, :column 1, :end-line 202, :end-column 28, :private true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 202, :column 20, :end-line 202, :end-column 28, :private true}}, unquote-splicing? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 642, :column 8, :end-line 642, :end-column 25, :private true, :arglists (quote ([form]))}, :private true, :name cljs.tools.reader/unquote-splicing?, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 25, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 642, :end-line 642, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, duplicate-keys-error {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 260, :column 8, :end-line 260, :end-column 28, :private true, :arglists (quote ([msg coll]))}, :private true, :name cljs.tools.reader/duplicate-keys-error, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 28, :method-params ([msg coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 260, :end-line 260, :max-fixed-arity 2, :fn-var true, :arglists (quote ([msg coll]))}, read-tagged {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 826, :column 8, :end-line 826, :end-column 19, :private true, :arglists (quote ([rdr initch opts pending-forms]))}, :private true, :name cljs.tools.reader/read-tagged, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 19, :method-params ([rdr initch opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 826, :end-line 826, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr initch opts pending-forms]))}, starting-line-col-info {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 194, :column 8, :end-line 194, :end-column 30, :private true, :arglists (quote ([rdr]))}, :private true, :name cljs.tools.reader/starting-line-col-info, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 30, :method-params ([rdr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rdr]))}, wrapping-reader {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 406, :column 8, :end-line 406, :end-column 23, :private true, :arglists (quote ([sym])), :doc "Returns a function which wraps a reader in a call to sym"}, :private true, :name cljs.tools.reader/wrapping-reader, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 23, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 406, :end-line 406, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym])), :doc "Returns a function which wraps a reader in a call to sym"}, read-meta {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 412, :column 8, :end-line 412, :end-column 17, :private true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read metadata and return the following object with the metadata applied"}, :private true, :name cljs.tools.reader/read-meta, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 17, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 412, :end-line 412, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read metadata and return the following object with the metadata applied"}, read-unicode-char {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 108, :column 8, :end-line 108, :end-column 25, :private true, :arglists (quote ([token offset length base] [rdr initch base length exact?])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([token offset length base] [rdr initch base length exact?]), :arglists ([token offset length base] [rdr initch base length exact?]), :arglists-meta (nil nil)}}, :private true, :name cljs.tools.reader/read-unicode-char, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([token offset length base] [rdr initch base length exact?]), :arglists ([token offset length base] [rdr initch base length exact?]), :arglists-meta (nil nil)}, :method-params ([token offset length base] [rdr initch base length exact?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 5, :fn-var true, :arglists ([token offset length base] [rdr initch base length exact?])}, char-code {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 102, :column 8, :end-line 102, :end-column 17, :private true, :arglists (quote ([ch base]))}, :private true, :name cljs.tools.reader/char-code, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 17, :method-params ([ch base]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ch base]))}, read-unmatched-delimiter {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 77, :column 8, :end-line 77, :end-column 32, :private true, :arglists (quote ([rdr ch opts pending-forms]))}, :private true, :name cljs.tools.reader/read-unmatched-delimiter, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 32, :method-params ([rdr ch opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr ch opts pending-forms]))}, read-fn {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 574, :column 8, :end-line 574, :end-column 15, :private true, :arglists (quote ([rdr _ opts pending-forms]))}, :private true, :name cljs.tools.reader/read-fn, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 15, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 574, :end-line 574, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms]))}, syntax-quote* {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 717, :column 8, :end-line 717, :end-column 21, :private true, :arglists (quote ([form]))}, :private true, :name cljs.tools.reader/syntax-quote*, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 21, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 717, :end-line 717, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, bool? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 707, :column 7, :end-line 707, :end-column 12, :arglists (quote ([x]))}, :name cljs.tools.reader/bool?, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 707, :end-line 707, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, arg-env {:name cljs.tools.reader/arg-env, :file "out/cljs/tools/reader.cljs", :line 566, :column 1, :end-line 566, :end-column 33, :dynamic true, :private true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 566, :column 26, :end-line 566, :end-column 33, :dynamic true, :private true}}, read-suppress {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 484, :column 8, :end-line 484, :end-column 21, :private true, :arglists (quote ([first-line rdr opts pending-forms])), :doc "Read next form and suppress. Return nil or READ_FINISHED."}, :private true, :name cljs.tools.reader/read-suppress, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 21, :method-params ([first-line rdr opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 484, :end-line 484, :max-fixed-arity 4, :fn-var true, :arglists (quote ([first-line rdr opts pending-forms])), :doc "Read next form and suppress. Return nil or READ_FINISHED."}, *suppress-read* {:name cljs.tools.reader/*suppress-read*, :file "out/cljs/tools/reader.cljs", :line 857, :column 1, :end-line 857, :end-column 31, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 857, :column 16, :end-line 857, :end-column 31, :dynamic true}}, flatten-map {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 664, :column 8, :end-line 664, :end-column 19, :private true, :arglists (quote ([form])), :doc "Flatten a map into a seq of alternate keys and values"}, :private true, :name cljs.tools.reader/flatten-map, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 19, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 664, :end-line 664, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form])), :doc "Flatten a map into a seq of alternate keys and values"}, *default-data-reader-fn* {:name cljs.tools.reader/*default-data-reader-fn*, :file "out/cljs/tools/reader.cljs", :line 850, :column 1, :end-line 850, :end-column 40, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 850, :column 16, :end-line 850, :end-column 40, :dynamic true}, :doc "When no data reader is found for a tag and *default-data-reader-fn*\n  is non-nil, it will be called with two arguments, the tag and the value.\n  If *default-data-reader-fn* is nil (the default value), an exception\n  will be thrown for the unknown tag."}, read {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 913, :column 7, :end-line 913, :end-column 11, :arglists (quote ([] [reader] [opts reader] [reader eof-error? eof-value])), :doc "Reads the first object from an IPushbackReader or a java.io.PushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true.\n   Otherwise returns sentinel. If no stream is providen, *in* will be used.\n\n   Opts is a persistent map with valid keys:\n    :read-cond - :allow to process reader conditionals, or\n                 :preserve to keep all branches\n    :features - persistent set of feature keywords for reader conditionals\n    :eof - on eof, return value unless :eofthrow, then throw.\n           if not specified, will throw\n\n   To read data structures only, use clojure.tools.reader.edn/read\n\n   Note that the function signature of clojure.tools.reader/read and\n   clojure.tools.reader.edn/read is not the same for eof-handling", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([reader] [{eof :eof, :as opts, :or {eof :eofthrow}} reader] [reader eof-error? sentinel]), :arglists ([reader] [{eof :eof, :as opts, :or {eof :eofthrow}} reader] [reader eof-error? sentinel]), :arglists-meta (nil nil nil)}}, :name cljs.tools.reader/read, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([reader] [{eof :eof, :as opts, :or {eof :eofthrow}} reader] [reader eof-error? sentinel]), :arglists ([reader] [{eof :eof, :as opts, :or {eof :eofthrow}} reader] [reader eof-error? sentinel]), :arglists-meta (nil nil nil)}, :method-params ([reader] [{eof :eof, :as opts, :or {eof :eofthrow}} reader] [reader eof-error? sentinel]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 913, :end-line 913, :max-fixed-arity 3, :fn-var true, :arglists ([reader] [{eof :eof, :as opts, :or {eof :eofthrow}} reader] [reader eof-error? sentinel]), :doc "Reads the first object from an IPushbackReader or a java.io.PushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true.\n   Otherwise returns sentinel. If no stream is providen, *in* will be used.\n\n   Opts is a persistent map with valid keys:\n    :read-cond - :allow to process reader conditionals, or\n                 :preserve to keep all branches\n    :features - persistent set of feature keywords for reader conditionals\n    :eof - on eof, return value unless :eofthrow, then throw.\n           if not specified, will throw\n\n   To read data structures only, use clojure.tools.reader.edn/read\n\n   Note that the function signature of clojure.tools.reader/read and\n   clojure.tools.reader.edn/read is not the same for eof-handling"}, read-set {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 430, :column 8, :end-line 430, :end-column 16, :private true, :arglists (quote ([rdr _ opts pending-forms]))}, :private true, :name cljs.tools.reader/read-set, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 16, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 430, :end-line 430, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms]))}, read-symbol {:name cljs.tools.reader/read-symbol, :file "out/cljs/tools/reader.cljs", :line 607, :column 1, :end-line 607, :end-column 21, :declared true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 607, :column 10, :end-line 607, :end-column 21, :declared true}}, read-unquote {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 633, :column 8, :end-line 633, :end-column 20, :private true, :arglists (quote ([rdr comma opts pending-forms]))}, :private true, :name cljs.tools.reader/read-unquote, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 20, :method-params ([rdr comma opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 633, :end-line 633, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr comma opts pending-forms]))}, read-map {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 270, :column 8, :end-line 270, :end-column 16, :private true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read in a map, including its location if the reader is an indexing reader"}, :private true, :name cljs.tools.reader/read-map, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 16, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 270, :end-line 270, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read in a map, including its location if the reader is an indexing reader"}, read*-internal {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 864, :column 8, :end-line 864, :end-column 22, :private true, :arglists (quote ([reader eof-error? sentinel return-on opts pending-forms]))}, :private true, :name cljs.tools.reader/read*-internal, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 22, :method-params ([reader eof-error? sentinel return-on opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 864, :end-line 864, :max-fixed-arity 6, :fn-var true, :arglists (quote ([reader eof-error? sentinel return-on opts pending-forms]))}, unquote? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 646, :column 8, :end-line 646, :end-column 16, :private true, :arglists (quote ([form]))}, :private true, :name cljs.tools.reader/unquote?, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 16, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 646, :end-line 646, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, default-data-readers {:name cljs.tools.reader/default-data-readers, :file "out/cljs/tools/reader.cljs", :line 859, :column 1, :end-line 859, :end-column 26, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 859, :column 6, :end-line 859, :end-column 26}, :doc "Default map of data reader functions provided by Clojure.\n  May be overridden by binding *data-readers*"}, macros {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 790, :column 8, :end-line 790, :end-column 14, :private true, :arglists (quote ([ch]))}, :private true, :name cljs.tools.reader/macros, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 14, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 790, :end-line 790, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ch]))}, read-arg {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 609, :column 8, :end-line 609, :end-column 16, :private true, :arglists (quote ([rdr pct opts pending-forms]))}, :private true, :name cljs.tools.reader/read-arg, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 16, :method-params ([rdr pct opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 609, :end-line 609, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr pct opts pending-forms]))}, match-feature {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 495, :column 8, :end-line 495, :end-column 21, :private true, :arglists (quote ([first-line rdr opts pending-forms])), :doc "Read next feature. If matched, read next form and return.\n   Otherwise, read and skip next form, returning READ_FINISHED or nil."}, :private true, :name cljs.tools.reader/match-feature, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 21, :method-params ([first-line rdr opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 495, :end-line 495, :max-fixed-arity 4, :fn-var true, :arglists (quote ([first-line rdr opts pending-forms])), :doc "Read next feature. If matched, read next form and return.\n   Otherwise, read and skip next form, returning READ_FINISHED or nil."}, read-namespaced-map {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 766, :column 8, :end-line 766, :end-column 27, :private true, :arglists (quote ([rdr _ opts pending-forms]))}, :private true, :name cljs.tools.reader/read-namespaced-map, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 27, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 766, :end-line 766, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms]))}, read-syntax-quote {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 760, :column 8, :end-line 760, :end-column 25, :private true, :arglists (quote ([rdr backquote opts pending-forms]))}, :private true, :name cljs.tools.reader/read-syntax-quote, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 25, :method-params ([rdr backquote opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 760, :end-line 760, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr backquote opts pending-forms]))}, READ_FINISHED {:name cljs.tools.reader/READ_FINISHED, :file "out/cljs/tools/reader.cljs", :line 203, :column 1, :end-line 203, :end-column 33, :private true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 203, :column 20, :end-line 203, :end-column 33, :private true}}, read-list {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 226, :column 8, :end-line 226, :end-column 17, :private true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read in a list, including its location if the reader is an indexing reader"}, :private true, :name cljs.tools.reader/read-list, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 17, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read in a list, including its location if the reader is an indexing reader"}, read-cond-delimited {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 514, :column 8, :end-line 514, :end-column 27, :private true, :arglists (quote ([rdr splicing opts pending-forms]))}, :private true, :name cljs.tools.reader/read-cond-delimited, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 27, :method-params ([rdr splicing opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 514, :end-line 514, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr splicing opts pending-forms]))}, RESERVED_FEATURES {:name cljs.tools.reader/RESERVED_FEATURES, :file "out/cljs/tools/reader.cljs", :line 457, :column 1, :end-line 457, :end-column 33, :private true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 457, :column 16, :end-line 457, :end-column 33, :private true}}, dispatch-macros {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 811, :column 8, :end-line 811, :end-column 23, :private true, :arglists (quote ([ch]))}, :private true, :name cljs.tools.reader/dispatch-macros, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 23, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 811, :end-line 811, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ch]))}, read* {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 886, :column 8, :end-line 886, :end-column 13, :private true, :arglists (quote ([reader eof-error? sentinel opts pending-forms] [reader eof-error? sentinel return-on opts pending-forms])), :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([reader eof-error? sentinel opts pending-forms] [reader eof-error? sentinel return-on opts pending-forms]), :arglists ([reader eof-error? sentinel opts pending-forms] [reader eof-error? sentinel return-on opts pending-forms]), :arglists-meta (nil nil)}}, :private true, :name cljs.tools.reader/read*, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([reader eof-error? sentinel opts pending-forms] [reader eof-error? sentinel return-on opts pending-forms]), :arglists ([reader eof-error? sentinel opts pending-forms] [reader eof-error? sentinel return-on opts pending-forms]), :arglists-meta (nil nil)}, :method-params ([reader eof-error? sentinel opts pending-forms] [reader eof-error? sentinel return-on opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 886, :end-line 886, :max-fixed-arity 6, :fn-var true, :arglists ([reader eof-error? sentinel opts pending-forms] [reader eof-error? sentinel return-on opts pending-forms])}, *data-readers* {:name cljs.tools.reader/*data-readers*, :file "out/cljs/tools/reader.cljs", :line 843, :column 1, :end-line 843, :end-column 30, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 843, :column 16, :end-line 843, :end-column 30, :dynamic true}, :doc "Map from reader tag symbols to data reader Vars.\n  Reader tags without namespace qualifiers are reserved for Clojure.\n  This light version of tools.reader has no implementation for default\n  reader tags such as #inst and #uuid."}, syntax-quote-coll {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 692, :column 8, :end-line 692, :end-column 25, :private true, :arglists (quote ([type coll]))}, :private true, :name cljs.tools.reader/syntax-quote-coll, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 25, :method-params ([type coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 692, :end-line 692, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type coll]))}, *read-delim* {:name cljs.tools.reader/*read-delim*, :file "out/cljs/tools/reader.cljs", :line 205, :column 1, :end-line 205, :end-column 28, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 205, :column 16, :end-line 205, :end-column 28, :dynamic true}}, resolve-symbol {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 712, :column 17, :end-line 712, :end-column 31, :dynamic true, :arglists (quote ([s])), :doc "Resolve a symbol s into its fully qualified namespace version"}, :name cljs.tools.reader/resolve-symbol, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 31, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 712, :end-line 712, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Resolve a symbol s into its fully qualified namespace version"}, read-delimited {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 220, :column 8, :end-line 220, :end-column 22, :private true, :arglists (quote ([delim rdr opts pending-forms])), :doc "Reads and returns a collection ended with delim"}, :private true, :name cljs.tools.reader/read-delimited, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 22, :method-params ([delim rdr opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 220, :end-line 220, :max-fixed-arity 4, :fn-var true, :arglists (quote ([delim rdr opts pending-forms])), :doc "Reads and returns a collection ended with delim"}, read-token {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 48, :column 8, :end-line 48, :end-column 18, :private true, :arglists (quote ([rdr initch])), :doc "Read in a single logical token from the reader"}, :private true, :name cljs.tools.reader/read-token, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 18, :method-params ([rdr initch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr initch])), :doc "Read in a single logical token from the reader"}, read-cond {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 544, :column 8, :end-line 544, :end-column 17, :private true, :arglists (quote ([rdr _ opts pending-forms]))}, :private true, :name cljs.tools.reader/read-cond, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 17, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 544, :end-line 544, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms]))}, upper-limit {:name cljs.tools.reader/upper-limit, :file "out/cljs/tools/reader.cljs", :line 145, :column 1, :end-line 145, :end-column 35, :const true, :private true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 145, :column 24, :end-line 145, :end-column 35, :const true, :private true}}, loc-info {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 341, :column 8, :end-line 341, :end-column 16, :private true, :arglists (quote ([rdr line column]))}, :private true, :name cljs.tools.reader/loc-info, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 16, :method-params ([rdr line column]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 341, :end-line 341, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr line column]))}, gensym-env {:name cljs.tools.reader/gensym-env, :file "out/cljs/tools/reader.cljs", :line 631, :column 1, :end-line 631, :end-column 36, :dynamic true, :private true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 631, :column 26, :end-line 631, :end-column 36, :dynamic true, :private true}}, *alias-map* {:name cljs.tools.reader/*alias-map*, :file "out/cljs/tools/reader.cljs", :line 374, :column 1, :end-line 374, :end-column 27, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 374, :column 16, :end-line 374, :end-column 27, :dynamic true}, :doc "Map from ns alias to ns, if non-nil, it will be used to resolve read-time\n   ns aliases.\n\n   Defaults to nil"}, read-regex {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 85, :column 7, :end-line 85, :end-column 17, :arglists (quote ([rdr ch opts pending-forms]))}, :name cljs.tools.reader/read-regex, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 17, :method-params ([rdr ch opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr ch opts pending-forms]))}, sb {:name cljs.tools.reader/sb, :file "out/cljs/tools/reader.cljs", :line 46, :column 1, :end-line 46, :end-column 8, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 46, :column 6, :end-line 46, :end-column 8}}, read-dispatch {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 69, :column 8, :end-line 69, :end-column 21, :private true, :arglists (quote ([rdr _ opts pending-forms]))}, :private true, :name cljs.tools.reader/read-dispatch, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 21, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms]))}, check-eof-error {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 465, :column 8, :end-line 465, :end-column 23, :private true, :arglists (quote ([form rdr first-line]))}, :private true, :name cljs.tools.reader/check-eof-error, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 23, :method-params ([form rdr first-line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 465, :end-line 465, :max-fixed-arity 3, :fn-var true, :arglists (quote ([form rdr first-line]))}, check-invalid-read-cond {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 477, :column 8, :end-line 477, :end-column 31, :private true, :arglists (quote ([form rdr first-line]))}, :private true, :name cljs.tools.reader/check-invalid-read-cond, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 31, :method-params ([form rdr first-line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 477, :end-line 477, :max-fixed-arity 3, :fn-var true, :arglists (quote ([form rdr first-line]))}, read-string {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 934, :column 7, :end-line 934, :end-column 18, :arglists (quote ([s] [opts s])), :doc "Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   To read data structures only, use clojure.tools.reader.edn/read-string\n\n   Note that the function signature of clojure.tools.reader/read-string and\n   clojure.tools.reader.edn/read-string is not the same for eof-handling", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [opts s]), :arglists ([s] [opts s]), :arglists-meta (nil nil)}}, :name cljs.tools.reader/read-string, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [opts s]), :arglists ([s] [opts s]), :arglists-meta (nil nil)}, :method-params ([s] [opts s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 934, :end-line 934, :max-fixed-arity 2, :fn-var true, :arglists ([s] [opts s]), :doc "Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   To read data structures only, use clojure.tools.reader.edn/read-string\n\n   Note that the function signature of clojure.tools.reader/read-string and\n   clojure.tools.reader.edn/read-string is not the same for eof-handling"}, check-reserved-features {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 472, :column 8, :end-line 472, :end-column 31, :private true, :arglists (quote ([rdr form]))}, :private true, :name cljs.tools.reader/check-reserved-features, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 31, :method-params ([rdr form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 472, :end-line 472, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr form]))}, has-feature? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 459, :column 8, :end-line 459, :end-column 20, :private true, :arglists (quote ([rdr feature opts]))}, :private true, :name cljs.tools.reader/has-feature?, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 20, :method-params ([rdr feature opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 459, :end-line 459, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr feature opts]))}, valid-octal? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 148, :column 8, :end-line 148, :end-column 20, :private true, :arglists (quote ([token base]))}, :private true, :name cljs.tools.reader/valid-octal?, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 20, :method-params ([token base]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 2, :fn-var true, :arglists (quote ([token base]))}, escape-char {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 308, :column 8, :end-line 308, :end-column 19, :private true, :arglists (quote ([sb rdr]))}, :private true, :name cljs.tools.reader/escape-char, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 19, :method-params ([sb rdr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 308, :end-line 308, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sb rdr]))}, read-char* {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 151, :column 8, :end-line 151, :end-column 18, :private true, :arglists (quote ([rdr backslash opts pending-forms])), :doc "Read in a character literal"}, :private true, :name cljs.tools.reader/read-char*, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 18, :method-params ([rdr backslash opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr backslash opts pending-forms])), :doc "Read in a character literal"}, resolve-ns {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 381, :column 8, :end-line 381, :end-column 18, :private true, :arglists (quote ([sym]))}, :private true, :name cljs.tools.reader/resolve-ns, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 18, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 381, :end-line 381, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, read-delimited-internal {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 207, :column 8, :end-line 207, :end-column 31, :private true, :arglists (quote ([delim rdr opts pending-forms]))}, :private true, :name cljs.tools.reader/read-delimited-internal, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 31, :method-params ([delim rdr opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 4, :fn-var true, :arglists (quote ([delim rdr opts pending-forms]))}, read-string* {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 329, :column 8, :end-line 329, :end-column 20, :private true, :arglists (quote ([reader _ opts pending-forms]))}, :private true, :name cljs.tools.reader/read-string*, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 20, :method-params ([reader _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 329, :end-line 329, :max-fixed-arity 4, :fn-var true, :arglists (quote ([reader _ opts pending-forms]))}, macro-terminating? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 41, :column 17, :end-line 41, :end-column 35, :tag boolean, :private true, :arglists (quote ([ch]))}, :private true, :name cljs.tools.reader/macro-terminating?, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 35, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :ret-tag boolean, :end-line 41, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([ch]))}, map-func {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 700, :column 7, :end-line 700, :end-column 15, :arglists (quote ([coll])), :doc "Decide which map type to use, array-map if less than 16 elements"}, :name cljs.tools.reader/map-func, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 15, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 700, :end-line 700, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Decide which map type to use, array-map if less than 16 elements"}, lower-limit {:name cljs.tools.reader/lower-limit, :file "out/cljs/tools/reader.cljs", :line 146, :column 1, :end-line 146, :end-column 35, :const true, :private true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 146, :column 24, :end-line 146, :end-column 35, :const true, :private true}}, ending-line-col-info {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 198, :column 8, :end-line 198, :end-column 28, :private true, :arglists (quote ([rdr]))}, :private true, :name cljs.tools.reader/ending-line-col-info, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 28, :method-params ([rdr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rdr]))}, register-arg {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 595, :column 8, :end-line 595, :end-column 20, :private true, :arglists (quote ([n])), :doc "Registers an argument to the arg-env"}, :private true, :name cljs.tools.reader/register-arg, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 20, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 595, :end-line 595, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Registers an argument to the arg-env"}, read-keyword {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 386, :column 8, :end-line 386, :end-column 20, :private true, :arglists (quote ([reader initch opts pending-forms]))}, :private true, :name cljs.tools.reader/read-keyword, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 20, :method-params ([reader initch opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 386, :end-line 386, :max-fixed-arity 4, :fn-var true, :arglists (quote ([reader initch opts pending-forms]))}, read-discard {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 451, :column 8, :end-line 451, :end-column 20, :private true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read and discard the first object from rdr"}, :private true, :name cljs.tools.reader/read-discard, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 20, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 451, :end-line 451, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read and discard the first object from rdr"}, garg {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 568, :column 8, :end-line 568, :end-column 12, :private true, :arglists (quote ([n])), :doc "Get a symbol for an anonymous ?argument?"}, :private true, :name cljs.tools.reader/garg, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 12, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 568, :end-line 568, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Get a symbol for an anonymous ?argument?"}, read-vector {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 244, :column 8, :end-line 244, :end-column 19, :private true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read in a vector, including its location if the reader is an indexing reader"}, :private true, :name cljs.tools.reader/read-vector, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 19, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 244, :end-line 244, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read in a vector, including its location if the reader is an indexing reader"}, read-number {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 297, :column 8, :end-line 297, :end-column 19, :private true, :arglists (quote ([rdr initch]))}, :private true, :name cljs.tools.reader/read-number, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 19, :method-params ([rdr initch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 297, :end-line 297, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr initch]))}, add-meta {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 686, :column 8, :end-line 686, :end-column 16, :private true, :arglists (quote ([form ret]))}, :private true, :name cljs.tools.reader/add-meta, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 16, :method-params ([form ret]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 686, :end-line 686, :max-fixed-arity 2, :fn-var true, :arglists (quote ([form ret]))}, register-gensym {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 675, :column 8, :end-line 675, :end-column 23, :private true, :arglists (quote ([sym]))}, :private true, :name cljs.tools.reader/register-gensym, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 23, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 675, :end-line 675, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, expand-list {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/tools/reader.cljs", :line 650, :column 8, :end-line 650, :end-column 19, :private true, :arglists (quote ([s])), :doc "Expand a list by resolving its syntax quotes and unquotes"}, :private true, :name cljs.tools.reader/expand-list, :variadic false, :file "out/cljs/tools/reader.cljs", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 650, :end-line 650, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Expand a list by resolving its syntax quotes and unquotes"}}, :require-macros {cljs.tools.reader.reader-types cljs.tools.reader.reader-types}, :cljs.analyzer/constants {:seen #{& :features clojure.core/list cljs.core/array-map :reader-exception :else cljs.core/hash-map cljs.core/apply :default :file cljs.core/concat :end-column :read-cond :type :preserve :source :illegal-argument cljs.core/with-meta :allow :sym :column :illegal-state clojure.core/unquote-splicing :line fn* clojure.core/deref / clojure.core/unquote :end-line cljs.core/vec cljs.core/sequence :unsupported-operation var quote :eof cljs.core/hash-set cljs.core/list :eofthrow :runtime-exception :none}, :order [:type :illegal-argument :else :file :line :column :end-line :end-column / :none :default :features :preserve :allow :read-cond :runtime-exception :illegal-state & fn* clojure.core/unquote-splicing clojure.core/unquote clojure.core/list :source cljs.core/with-meta cljs.core/sequence cljs.core/concat cljs.core/apply cljs.core/hash-map cljs.core/array-map :sym quote cljs.core/vec cljs.core/hash-set cljs.core/list :unsupported-operation clojure.core/deref var :reader-exception :eof :eofthrow]}, :doc "A clojure reader in clojure"}