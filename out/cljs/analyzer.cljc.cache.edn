{:rename-macros {}, :renames {}, :use-macros {ensure cljs.env.macros, disallowing-recur cljs.analyzer.macros, no-warn cljs.analyzer.macros, allowing-redef cljs.analyzer.macros, wrapping-errors cljs.analyzer.macros}, :excludes #{ensure js-reserved macroexpand-1 ns-interns}, :name cljs.analyzer, :imports nil, :requires {set clojure.set, gstring goog.string, cljs.tools.reader cljs.tools.reader, goog.string goog.string, tags cljs.tagged-literals, cljs.tools.reader.reader-types cljs.tools.reader.reader-types, cljs.env cljs.env, clojure.set clojure.set, readers cljs.tools.reader.reader-types, cljs.tagged-literals cljs.tagged-literals, env cljs.env, string clojure.string, clojure.string clojure.string, cljs.reader cljs.reader, edn cljs.reader, reader cljs.tools.reader}, :uses nil, :defs {type? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 904, :column 7, :end-line 904, :end-column 12, :arglists (quote ([env t])), :tag boolean}, :name cljs.analyzer/type?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 12, :method-params ([env t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 904, :ret-tag boolean, :end-line 904, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([env t]))}, get-namespace {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 498, :column 7, :end-line 498, :end-column 20, :arglists (quote ([key] [cenv key])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([key] [cenv key]), :arglists ([key] [cenv key]), :arglists-meta (nil nil)}}, :name cljs.analyzer/get-namespace, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([key] [cenv key]), :arglists ([key] [cenv key]), :arglists-meta (nil nil)}, :method-params ([key] [cenv key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 498, :end-line 498, :max-fixed-arity 2, :fn-var true, :arglists ([key] [cenv key])}, error-message {:name cljs.analyzer/error-message, :file "out/cljs/analyzer.cljc", :line 253, :column 1, :end-line 253, :end-column 24, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 253, :column 11, :end-line 253, :end-column 24}}, elide-reader-meta {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2782, :column 7, :end-line 2782, :end-column 24, :arglists (quote ([m]))}, :name cljs.analyzer/elide-reader-meta, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 24, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2782, :end-line 2782, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, missing-rename? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1759, :column 7, :end-line 1759, :end-column 22, :arglists (quote ([sym cenv]))}, :name cljs.analyzer/missing-rename?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 22, :method-params ([sym cenv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1759, :end-line 1759, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sym cenv]))}, analyze-let {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1573, :column 7, :end-line 1573, :end-column 18, :arglists (quote ([encl-env [_ bindings & exprs :as form] is-loop]))}, :name cljs.analyzer/analyze-let, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 18, :method-params ([encl-env p__8565 is-loop]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1573, :end-line 1573, :max-fixed-arity 3, :fn-var true, :arglists (quote ([encl-env [_ bindings & exprs :as form] is-loop]))}, desugar-ns-specs {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2081, :column 7, :end-line 2081, :end-column 23, :arglists (quote ([args])), :doc "Given an original set of ns specs desugar :include-macros and :refer-macros\n   usage into only primitive spec forms - :use, :require, :use-macros,\n   :require-macros. If a library includes a macro file of with the same name\n   as the namespace will also be desugared."}, :name cljs.analyzer/desugar-ns-specs, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 23, :method-params ([args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2081, :end-line 2081, :max-fixed-arity 1, :fn-var true, :arglists (quote ([args])), :doc "Given an original set of ns specs desugar :include-macros and :refer-macros\n   usage into only primitive spec forms - :use, :require, :use-macros,\n   :require-macros. If a library includes a macro file of with the same name\n   as the namespace will also be desugared."}, classify-dot-form {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2304, :column 8, :end-line 2304, :end-column 25, :private true, :arglists (quote ([[target member args]]))}, :private true, :name cljs.analyzer/classify-dot-form, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 25, :method-params ([p__8984]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2304, :end-line 2304, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[target member args]]))}, NUMBER_SYM {:name cljs.analyzer/NUMBER_SYM, :file "out/cljs/analyzer.cljc", :line 178, :column 4, :end-line 178, :end-column 19, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 178, :column 9, :end-line 178, :end-column 19}}, analyze-map {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2738, :column 7, :end-line 2738, :end-column 18, :arglists (quote ([env form]))}, :name cljs.analyzer/analyze-map, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 18, :method-params ([env form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2738, :end-line 2738, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env form]))}, NUMERIC_SET {:name cljs.analyzer/NUMERIC_SET, :file "out/cljs/analyzer.cljc", :line 2427, :column 1, :end-line 2427, :end-column 17, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2427, :column 6, :end-line 2427, :end-column 17}}, analyze-seq* {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2707, :column 7, :end-line 2707, :end-column 19, :arglists (quote ([op env form name opts]))}, :name cljs.analyzer/analyze-seq*, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 19, :method-params ([op env form name opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2707, :end-line 2707, :max-fixed-arity 5, :fn-var true, :arglists (quote ([op env form name opts]))}, *cljs-dep-set* {:name cljs.analyzer/*cljs-dep-set*, :file "out/cljs/analyzer.cljc", :line 50, :column 1, :end-line 50, :end-column 30, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 50, :column 16, :end-line 50, :end-column 30, :dynamic true}}, resolve-var {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 731, :column 7, :end-line 731, :end-column 18, :arglists (quote ([env sym] [env sym confirm])), :doc "Resolve a var. Accepts a side-effecting confirm fn for producing\n   warnings about unresolved vars.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([env sym] [env sym confirm]), :arglists ([env sym] [env sym confirm]), :arglists-meta (nil nil)}}, :name cljs.analyzer/resolve-var, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([env sym] [env sym confirm]), :arglists ([env sym] [env sym confirm]), :arglists-meta (nil nil)}, :method-params ([env sym] [env sym confirm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 731, :end-line 731, :max-fixed-arity 3, :fn-var true, :arglists ([env sym] [env sym confirm]), :doc "Resolve a var. Accepts a side-effecting confirm fn for producing\n   warnings about unresolved vars."}, analyze-fn-method {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1310, :column 8, :end-line 1310, :end-column 25, :private true, :arglists (quote ([env locals form type]))}, :private true, :name cljs.analyzer/analyze-fn-method, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 25, :method-params ([env locals form type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1310, :end-line 1310, :max-fixed-arity 4, :fn-var true, :arglists (quote ([env locals form type]))}, JS_STAR_SYM {:name cljs.analyzer/JS_STAR_SYM, :file "out/cljs/analyzer.cljc", :line 186, :column 4, :end-line 186, :end-column 20, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 186, :column 9, :end-line 186, :end-column 20}}, js-star-seg {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2417, :column 7, :end-line 2417, :end-column 18, :arglists (quote ([s]))}, :name cljs.analyzer/js-star-seg, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2417, :end-line 2417, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, *passes* {:name cljs.analyzer/*passes*, :file "out/cljs/analyzer.cljc", :line 2846, :column 1, :end-line 2846, :end-column 24, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2846, :column 16, :end-line 2846, :end-column 24, :dynamic true}}, get-expander-ns {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2590, :column 7, :end-line 2590, :end-column 22, :arglists (quote ([env nstr]))}, :name cljs.analyzer/get-expander-ns, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 22, :method-params ([env nstr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2590, :end-line 2590, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env nstr]))}, message {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 605, :column 7, :end-line 605, :end-column 14, :arglists (quote ([env s]))}, :name cljs.analyzer/message, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 14, :method-params ([env s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 605, :end-line 605, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env s]))}, parse-invoke {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2544, :column 7, :end-line 2544, :end-column 19, :arglists (quote ([env form]))}, :name cljs.analyzer/parse-invoke, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 19, :method-params ([env form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2544, :end-line 2544, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env form]))}, t_cljs$analyzer8285 {:num-fields 1, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.analyzer/t_cljs$analyzer8285, :file "out/cljs/analyzer.cljc", :type true, :anonymous true, :column 6, :line 492, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, *cljs-warning-handlers* {:name cljs.analyzer/*cljs-warning-handlers*, :file "out/cljs/analyzer.cljc", :line 413, :column 1, :end-line 413, :end-column 39, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 413, :column 16, :end-line 413, :end-column 39, :dynamic true}}, analyze-seq*-wrap {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2712, :column 7, :end-line 2712, :end-column 24, :arglists (quote ([op env form name opts]))}, :name cljs.analyzer/analyze-seq*-wrap, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 24, :method-params ([op env form name opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2712, :end-line 2712, :max-fixed-arity 5, :fn-var true, :arglists (quote ([op env form name opts]))}, confirm-bindings {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 822, :column 7, :end-line 822, :end-column 23, :arglists (quote ([env names])), :doc "Given env, an analysis environment env, and names, a list of symbols, confirm\n   that all correspond to declared dynamic vars."}, :name cljs.analyzer/confirm-bindings, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 23, :method-params ([env names]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 822, :end-line 822, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env names])), :doc "Given env, an analysis environment env, and names, a list of symbols, confirm\n   that all correspond to declared dynamic vars."}, foreign-dep? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1717, :column 7, :end-line 1717, :end-column 19, :arglists (quote ([dep])), :tag boolean}, :name cljs.analyzer/foreign-dep?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 19, :method-params ([dep]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1717, :ret-tag boolean, :end-line 1717, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([dep]))}, missing-rename-macro? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1768, :column 7, :end-line 1768, :end-column 28, :arglists (quote ([sym]))}, :name cljs.analyzer/missing-rename-macro?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 28, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1768, :end-line 1768, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, missing-uses {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1775, :column 7, :end-line 1775, :end-column 19, :arglists (quote ([uses env]))}, :name cljs.analyzer/missing-uses, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 19, :method-params ([uses env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1775, :end-line 1775, :max-fixed-arity 2, :fn-var true, :arglists (quote ([uses env]))}, missing-use? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1753, :column 7, :end-line 1753, :end-column 19, :arglists (quote ([lib sym cenv]))}, :name cljs.analyzer/missing-use?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 19, :method-params ([lib sym cenv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1753, :end-line 1753, :max-fixed-arity 3, :fn-var true, :arglists (quote ([lib sym cenv]))}, hex-format {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 427, :column 8, :end-line 427, :end-column 18, :private true, :arglists (quote ([s pad]))}, :private true, :name cljs.analyzer/hex-format, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 18, :method-params ([s pad]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 427, :end-line 427, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s pad]))}, NEW_SYM {:name cljs.analyzer/NEW_SYM, :file "out/cljs/analyzer.cljc", :line 192, :column 4, :end-line 192, :end-column 16, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 192, :column 9, :end-line 192, :end-column 16}}, analyze {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2903, :column 7, :end-line 2903, :end-column 14, :arglists (quote ([env form] [env form name] [env form name opts])), :doc "Given an environment, a map containing {:locals (mapping of names to bindings), :context\n  (one of :statement, :expr, :return), :ns (a symbol naming the\n  compilation ns)}, and form, returns an expression object (a map\n  containing at least :form, :op and :env keys). If expr has any (immediately)\n  nested exprs, must have :children [exprs...] entry. This will\n  facilitate code walking without knowing the details of the op set.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([env form] [env form name] [env form name opts]), :arglists ([env form] [env form name] [env form name opts]), :arglists-meta (nil nil nil)}}, :name cljs.analyzer/analyze, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([env form] [env form name] [env form name opts]), :arglists ([env form] [env form name] [env form name opts]), :arglists-meta (nil nil nil)}, :method-params ([env form] [env form name] [env form name opts]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 2903, :end-line 2903, :max-fixed-arity 4, :fn-var true, :arglists ([env form] [env form name] [env form name opts]), :doc "Given an environment, a map containing {:locals (mapping of names to bindings), :context\n  (one of :statement, :expr, :return), :ns (a symbol naming the\n  compilation ns)}, and form, returns an expression object (a map\n  containing at least :form, :op and :env keys). If expr has any (immediately)\n  nested exprs, must have :children [exprs...] entry. This will\n  facilitate code walking without knowing the details of the op set."}, used? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2583, :column 7, :end-line 2583, :end-column 12, :arglists (quote ([env sym])), :tag boolean}, :name cljs.analyzer/used?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 12, :method-params ([env sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2583, :ret-tag boolean, :end-line 2583, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([env sym]))}, parse-type {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2259, :column 7, :end-line 2259, :end-column 17, :arglists (quote ([op env [_ tsym fields pmasks body :as form]]))}, :name cljs.analyzer/parse-type, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 17, :method-params ([op env p__8976]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2259, :end-line 2259, :max-fixed-arity 3, :fn-var true, :arglists (quote ([op env [_ tsym fields pmasks body :as form]]))}, gets {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 154, :column 7, :end-line 154, :end-column 11, :arglists (quote ([m k0 k1] [m k0 k1 k2] [m k0 k1 k2 k3])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([m k0 k1] [m k0 k1 k2] [m k0 k1 k2 k3]), :arglists ([m k0 k1] [m k0 k1 k2] [m k0 k1 k2 k3]), :arglists-meta (nil nil nil)}}, :name cljs.analyzer/gets, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([m k0 k1] [m k0 k1 k2] [m k0 k1 k2 k3]), :arglists ([m k0 k1] [m k0 k1 k2] [m k0 k1 k2 k3]), :arglists-meta (nil nil nil)}, :method-params ([m k0 k1] [m k0 k1 k2] [m k0 k1 k2 k3]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 5, :fn-var true, :arglists ([m k0 k1] [m k0 k1 k2] [m k0 k1 k2 k3])}, check-rename-macros-inferring-missing {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1838, :column 7, :end-line 1838, :end-column 44, :arglists (quote ([{:keys [name renames], :as ast} env]))}, :name cljs.analyzer/check-rename-macros-inferring-missing, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 44, :method-params ([p__8763 env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1838, :end-line 1838, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [name renames], :as ast} env]))}, ->t_cljs$analyzer8285 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([meta8286])), :file nil}, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.analyzer/->t_cljs$analyzer8285, :variadic false, :file "out/cljs/analyzer.cljc", :method-params ([meta8286]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 492, :max-fixed-arity 1, :fn-var true, :arglists (quote ([meta8286])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, infer-invoke {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 959, :column 7, :end-line 959, :end-column 19, :arglists (quote ([env e]))}, :name cljs.analyzer/infer-invoke, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 19, :method-params ([env e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 959, :end-line 959, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env e]))}, *cljs-static-fns* {:name cljs.analyzer/*cljs-static-fns*, :file "out/cljs/analyzer.cljc", :line 47, :column 1, :end-line 47, :end-column 33, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 47, :column 16, :end-line 47, :end-column 33, :dynamic true}}, macro-ns-name {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2143, :column 7, :end-line 2143, :end-column 20, :arglists (quote ([name]))}, :name cljs.analyzer/macro-ns-name, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 20, :method-params ([name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2143, :end-line 2143, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name]))}, *reload-macros* {:name cljs.analyzer/*reload-macros*, :file "out/cljs/analyzer.cljc", :line 54, :column 1, :end-line 54, :end-column 31, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 54, :column 16, :end-line 54, :end-column 31, :dynamic true}}, resolve-existing-var {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 814, :column 7, :end-line 814, :end-column 27, :arglists (quote ([env sym])), :doc "Given env, an analysis environment, and sym, a symbol, resolve an existing var.\n   Emits a warning if no such var exists."}, :name cljs.analyzer/resolve-existing-var, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 27, :method-params ([env sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 814, :end-line 814, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env sym])), :doc "Given env, an analysis environment, and sym, a symbol, resolve an existing var.\n   Emits a warning if no such var exists."}, NOT_NATIVE {:name cljs.analyzer/NOT_NATIVE, :file "out/cljs/analyzer.cljc", :line 923, :column 1, :end-line 923, :end-column 16, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 923, :column 6, :end-line 923, :end-column 16}}, IGNORE_SYM {:name cljs.analyzer/IGNORE_SYM, :file "out/cljs/analyzer.cljc", :line 200, :column 1, :end-line 200, :end-column 16, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 200, :column 6, :end-line 200, :end-column 16}}, parse-invoke* {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2508, :column 7, :end-line 2508, :end-column 20, :arglists (quote ([env [f & args :as form]]))}, :name cljs.analyzer/parse-invoke*, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 20, :method-params ([env p__9039]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2508, :end-line 2508, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env [f & args :as form]]))}, loaded-js-ns? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 655, :column 7, :end-line 655, :end-column 20, :arglists (quote ([env prefix])), :doc "Check if a JavaScript namespace has been loaded. JavaScript vars are\n  not currently checked.", :tag boolean}, :name cljs.analyzer/loaded-js-ns?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 20, :method-params ([env prefix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 655, :ret-tag boolean, :end-line 655, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([env prefix])), :doc "Check if a JavaScript namespace has been loaded. JavaScript vars are\n  not currently checked."}, analyze-vector {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2754, :column 7, :end-line 2754, :end-column 21, :arglists (quote ([env form]))}, :name cljs.analyzer/analyze-vector, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 21, :method-params ([env form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2754, :end-line 2754, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env form]))}, namespaces {:name cljs.analyzer/namespaces, :file "out/cljs/analyzer.cljc", :line 484, :column 1, :end-line 484, :end-column 16, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 484, :column 6, :end-line 484, :end-column 16}}, ns->relpath {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 225, :column 10, :end-line 225, :end-column 21, :arglists (quote ([ns] [ns ext])), :doc "Given a namespace as a symbol return the relative path. May optionally\n     provide the file extension, defaults to :cljs.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ns] [ns ext]), :arglists ([ns] [ns ext]), :arglists-meta (nil nil)}}, :name cljs.analyzer/ns->relpath, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ns] [ns ext]), :arglists ([ns] [ns ext]), :arglists-meta (nil nil)}, :method-params ([ns] [ns ext]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 225, :end-line 225, :max-fixed-arity 2, :fn-var true, :arglists ([ns] [ns ext]), :doc "Given a namespace as a symbol return the relative path. May optionally\n     provide the file extension, defaults to :cljs."}, analyze-let-body {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1568, :column 7, :end-line 1568, :end-column 23, :arglists (quote ([env context exprs recur-frames loop-lets]))}, :name cljs.analyzer/analyze-let-body, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 23, :method-params ([env context exprs recur-frames loop-lets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1568, :end-line 1568, :max-fixed-arity 5, :fn-var true, :arglists (quote ([env context exprs recur-frames loop-lets]))}, cljs-set? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 217, :column 19, :end-line 217, :end-column 28, :tag boolean, :arglists (quote ([x]))}, :name cljs.analyzer/cljs-set?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 28, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 217, :ret-tag boolean, :end-line 217, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, get-col {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 523, :column 7, :end-line 523, :end-column 14, :arglists (quote ([x env]))}, :name cljs.analyzer/get-col, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 14, :method-params ([x env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 523, :end-line 523, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x env]))}, basic-validate-ns-spec {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1860, :column 7, :end-line 1860, :end-column 29, :arglists (quote ([env macros? spec]))}, :name cljs.analyzer/basic-validate-ns-spec, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 29, :method-params ([env macros? spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1860, :end-line 1860, :max-fixed-arity 3, :fn-var true, :arglists (quote ([env macros? spec]))}, *cljs-warnings* {:name cljs.analyzer/*cljs-warnings*, :file "out/cljs/analyzer.cljc", :line 104, :column 1, :end-line 104, :end-column 31, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 104, :column 16, :end-line 104, :end-column 31, :dynamic true}}, analyzed? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2493, :column 8, :end-line 2493, :end-column 17, :private true, :arglists (quote ([f])), :tag boolean}, :private true, :name cljs.analyzer/analyzed?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 17, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2493, :ret-tag boolean, :end-line 2493, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([f]))}, analyze-deps {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1726, :column 7, :end-line 1726, :end-column 19, :arglists (quote ([lib deps env] [lib deps env opts])), :doc "Given a lib, a namespace, deps, its dependencies, env, an analysis environment\n   and opts, compiler options - analyze all of the dependencies. Required to\n   correctly analyze usage of other namespaces.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([lib deps env] [lib deps env opts]), :arglists ([lib deps env] [lib deps env opts]), :arglists-meta (nil nil)}}, :name cljs.analyzer/analyze-deps, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([lib deps env] [lib deps env opts]), :arglists ([lib deps env] [lib deps env opts]), :arglists-meta (nil nil)}, :method-params ([lib deps env] [lib deps env opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1726, :end-line 1726, :max-fixed-arity 4, :fn-var true, :arglists ([lib deps env] [lib deps env opts]), :doc "Given a lib, a namespace, deps, its dependencies, env, an analysis environment\n   and opts, compiler options - analyze all of the dependencies. Required to\n   correctly analyze usage of other namespaces."}, *cljs-macros-is-classpath* {:name cljs.analyzer/*cljs-macros-is-classpath*, :file "out/cljs/analyzer.cljc", :line 49, :column 1, :end-line 49, :end-column 42, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 49, :column 16, :end-line 49, :end-column 42, :dynamic true}}, *allow-redef* {:name cljs.analyzer/*allow-redef*, :file "out/cljs/analyzer.cljc", :line 868, :column 1, :end-line 868, :end-column 29, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 868, :column 16, :end-line 868, :end-column 29, :dynamic true}}, analyze-fn-method-body {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1306, :column 7, :end-line 1306, :end-column 29, :arglists (quote ([env form recur-frames]))}, :name cljs.analyzer/analyze-fn-method-body, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 29, :method-params ([env form recur-frames]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1306, :end-line 1306, :max-fixed-arity 3, :fn-var true, :arglists (quote ([env form recur-frames]))}, infer-type {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2796, :column 7, :end-line 2796, :end-column 17, :arglists (quote ([env ast _]))}, :name cljs.analyzer/infer-type, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 17, :method-params ([env ast _]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2796, :end-line 2796, :max-fixed-arity 3, :fn-var true, :arglists (quote ([env ast _]))}, parse-import-spec {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2010, :column 7, :end-line 2010, :end-column 24, :arglists (quote ([env deps spec]))}, :name cljs.analyzer/parse-import-spec, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 24, :method-params ([env deps spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2010, :end-line 2010, :max-fixed-arity 3, :fn-var true, :arglists (quote ([env deps spec]))}, clj-ns->cljs-ns {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2042, :column 7, :end-line 2042, :end-column 22, :arglists (quote ([sym])), :doc "Given a symbol that starts with clojure as the first segment return the\n   same symbol with the first segment replaced with cljs"}, :name cljs.analyzer/clj-ns->cljs-ns, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 22, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2042, :end-line 2042, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym])), :doc "Given a symbol that starts with clojure as the first segment return the\n   same symbol with the first segment replaced with cljs"}, use->require {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1930, :column 7, :end-line 1930, :end-column 19, :arglists (quote ([env [lib & filters :as spec]]))}, :name cljs.analyzer/use->require, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 19, :method-params ([env p__8790]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1930, :end-line 1930, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env [lib & filters :as spec]]))}, inferred-use-macros {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1791, :column 7, :end-line 1791, :end-column 26, :arglists (quote ([use-macros env]))}, :name cljs.analyzer/inferred-use-macros, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 26, :method-params ([use-macros env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1791, :end-line 1791, :max-fixed-arity 2, :fn-var true, :arglists (quote ([use-macros env]))}, analyze-symbol {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2548, :column 7, :end-line 2548, :end-column 21, :arglists (quote ([env sym])), :doc "Finds the var associated with sym"}, :name cljs.analyzer/analyze-symbol, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 21, :method-params ([env sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2548, :end-line 2548, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env sym])), :doc "Finds the var associated with sym"}, confirm-var-exists {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 668, :column 7, :end-line 668, :end-column 25, :arglists (quote ([env prefix suffix] [env prefix suffix missing-fn])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([env prefix suffix] [env prefix suffix missing-fn]), :arglists ([env prefix suffix] [env prefix suffix missing-fn]), :arglists-meta (nil nil)}}, :name cljs.analyzer/confirm-var-exists, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([env prefix suffix] [env prefix suffix missing-fn]), :arglists ([env prefix suffix] [env prefix suffix missing-fn]), :arglists-meta (nil nil)}, :method-params ([env prefix suffix] [env prefix suffix missing-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 668, :end-line 668, :max-fixed-arity 4, :fn-var true, :arglists ([env prefix suffix] [env prefix suffix missing-fn])}, analyze-keyword {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 879, :column 7, :end-line 879, :end-column 22, :arglists (quote ([env sym]))}, :name cljs.analyzer/analyze-keyword, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 22, :method-params ([env sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 879, :end-line 879, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env sym]))}, SENTINEL {:name cljs.analyzer/SENTINEL, :file "out/cljs/analyzer.cljc", :line 152, :column 10, :end-line 152, :end-column 23, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 152, :column 15, :end-line 152, :end-column 23}}, analyze-let-bindings {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1562, :column 7, :end-line 1562, :end-column 27, :arglists (quote ([encl-env bindings]))}, :name cljs.analyzer/analyze-let-bindings, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 27, :method-params ([encl-env bindings]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1562, :end-line 1562, :max-fixed-arity 2, :fn-var true, :arglists (quote ([encl-env bindings]))}, *loop-lets* {:name cljs.analyzer/*loop-lets*, :file "out/cljs/analyzer.cljc", :line 867, :column 1, :end-line 867, :end-column 27, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 867, :column 16, :end-line 867, :end-column 27, :dynamic true}}, js-reserved {:name cljs.analyzer/js-reserved, :file "out/cljs/analyzer.cljc", :line 136, :column 1, :end-line 136, :end-column 17, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 136, :column 6, :end-line 136, :end-column 17}}, *load-tests* {:name cljs.analyzer/*load-tests*, :file "out/cljs/analyzer.cljc", :line 52, :column 1, :end-line 52, :end-column 28, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 52, :column 16, :end-line 52, :end-column 28, :dynamic true}}, check-use-macros-inferring-missing {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1820, :column 7, :end-line 1820, :end-column 41, :arglists (quote ([{:keys [name uses use-macros], :as ast} env]))}, :name cljs.analyzer/check-use-macros-inferring-missing, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 41, :method-params ([p__8755 env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1820, :end-line 1820, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [name uses use-macros], :as ast} env]))}, macroexpand-1* {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2640, :column 7, :end-line 2640, :end-column 21, :arglists (quote ([env form]))}, :name cljs.analyzer/macroexpand-1*, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 21, :method-params ([env form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2640, :end-line 2640, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env form]))}, check-use-macros {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1807, :column 7, :end-line 1807, :end-column 23, :arglists (quote ([use-macros env] [use-macros missing-uses env])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([use-macros env] [use-macros missing-uses env]), :arglists ([use-macros env] [use-macros missing-uses env]), :arglists-meta (nil nil)}}, :name cljs.analyzer/check-use-macros, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([use-macros env] [use-macros missing-uses env]), :arglists ([use-macros env] [use-macros missing-uses env]), :arglists-meta (nil nil)}, :method-params ([use-macros env] [use-macros missing-uses env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1807, :end-line 1807, :max-fixed-arity 3, :fn-var true, :arglists ([use-macros env] [use-macros missing-uses env])}, get-expander {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2630, :column 7, :end-line 2630, :end-column 19, :arglists (quote ([sym env])), :doc "Given a sym, a symbol identifying a macro, and env, an analysis environment\n   return the corresponding Clojure macroexpander."}, :name cljs.analyzer/get-expander, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 19, :method-params ([sym env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2630, :end-line 2630, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sym env])), :doc "Given a sym, a symbol identifying a macro, and env, an analysis environment\n   return the corresponding Clojure macroexpander."}, analyze-js-star {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2471, :column 7, :end-line 2471, :end-column 22, :arglists (quote ([env jsform args form]))}, :name cljs.analyzer/analyze-js-star, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 22, :method-params ([env jsform args form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2471, :end-line 2471, :max-fixed-arity 4, :fn-var true, :arglists (quote ([env jsform args form]))}, cljs-map? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 209, :column 19, :end-line 209, :end-column 28, :tag boolean, :arglists (quote ([x]))}, :name cljs.analyzer/cljs-map?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 28, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 209, :ret-tag boolean, :end-line 209, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, build-dot-form {:name cljs.analyzer/build-dot-form, :file "out/cljs/analyzer.cljc", :line 2315, :column 1, :end-line 2315, :end-column 25, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2315, :column 11, :end-line 2315, :end-column 25}}, register-constant! {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 456, :column 8, :end-line 456, :end-column 26, :private true, :arglists (quote ([val] [env val])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([val] [env val]), :arglists ([val] [env val]), :arglists-meta (nil nil)}}, :private true, :name cljs.analyzer/register-constant!, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 26, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([val] [env val]), :arglists ([val] [env val]), :arglists-meta (nil nil)}, :method-params ([val] [env val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 456, :end-line 456, :max-fixed-arity 2, :fn-var true, :arglists ([val] [env val])}, js-star-interp {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2405, :column 7, :end-line 2405, :end-column 21, :arglists (quote ([env s]))}, :name cljs.analyzer/js-star-interp, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 21, :method-params ([env s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2405, :end-line 2405, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env s]))}, *recur-frames* {:name cljs.analyzer/*recur-frames*, :file "out/cljs/analyzer.cljc", :line 866, :column 1, :end-line 866, :end-column 30, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 866, :column 16, :end-line 866, :end-column 30, :dynamic true}}, STRING_SYM {:name cljs.analyzer/STRING_SYM, :file "out/cljs/analyzer.cljc", :line 181, :column 4, :end-line 181, :end-column 19, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 181, :column 9, :end-line 181, :end-column 19}}, analyze-fn-methods-pass2* {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1356, :column 7, :end-line 1356, :end-column 32, :arglists (quote ([menv locals type meths]))}, :name cljs.analyzer/analyze-fn-methods-pass2*, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 32, :method-params ([menv locals type meths]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1356, :end-line 1356, :max-fixed-arity 4, :fn-var true, :arglists (quote ([menv locals type meths]))}, macroexpand-1 {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2699, :column 7, :end-line 2699, :end-column 20, :arglists (quote ([env form])), :doc "Given a env, an analysis environment, and form, a ClojureScript form,\n   macroexpand the form once."}, :name cljs.analyzer/macroexpand-1, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 20, :method-params ([env form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2699, :end-line 2699, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env form])), :doc "Given a env, an analysis environment, and form, a ClojureScript form,\n   macroexpand the form once."}, analyze-file {:name cljs.analyzer/analyze-file, :file "out/cljs/analyzer.cljc", :line 1694, :column 1, :end-line 1694, :end-column 22, :declared true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1694, :column 10, :end-line 1694, :end-column 22, :declared true}}, resolve-macro-var {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 832, :column 7, :end-line 832, :end-column 24, :arglists (quote ([env sym])), :doc "Given env, an analysis environment, and sym, a symbol, resolve a macro."}, :name cljs.analyzer/resolve-macro-var, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 24, :method-params ([env sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 832, :end-line 832, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env sym])), :doc "Given env, an analysis environment, and sym, a symbol, resolve a macro."}, analyze-let-binding-init {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1508, :column 7, :end-line 1508, :end-column 31, :arglists (quote ([env init loop-lets]))}, :name cljs.analyzer/analyze-let-binding-init, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 31, :method-params ([env init loop-lets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1508, :end-line 1508, :max-fixed-arity 3, :fn-var true, :arglists (quote ([env init loop-lets]))}, infer-tag {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 971, :column 7, :end-line 971, :end-column 16, :arglists (quote ([env e])), :doc "Given env, an analysis environment, and e, an AST node, return the inferred\n   type of the node"}, :name cljs.analyzer/infer-tag, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 16, :method-params ([env e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 971, :end-line 971, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env e])), :doc "Given env, an analysis environment, and e, an AST node, return the inferred\n   type of the node"}, analyze-let-body* {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1565, :column 7, :end-line 1565, :end-column 24, :arglists (quote ([env context exprs]))}, :name cljs.analyzer/analyze-let-body*, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 24, :method-params ([env context exprs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1565, :end-line 1565, :max-fixed-arity 3, :fn-var true, :arglists (quote ([env context exprs]))}, analyze-js-star* {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2447, :column 7, :end-line 2447, :end-column 23, :arglists (quote ([env jsform args form]))}, :name cljs.analyzer/analyze-js-star*, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 23, :method-params ([env jsform args form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2447, :end-line 2447, :max-fixed-arity 4, :fn-var true, :arglists (quote ([env jsform args form]))}, inferred-rename-macros {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1796, :column 7, :end-line 1796, :end-column 29, :arglists (quote ([rename-macros env]))}, :name cljs.analyzer/inferred-rename-macros, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 29, :method-params ([rename-macros env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1796, :end-line 1796, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rename-macros env]))}, parse-ns-error-msg {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1857, :column 7, :end-line 1857, :end-column 25, :arglists (quote ([spec msg]))}, :name cljs.analyzer/parse-ns-error-msg, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 25, :method-params ([spec msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1857, :end-line 1857, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec msg]))}, missing-use-macro? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1764, :column 7, :end-line 1764, :end-column 25, :arglists (quote ([lib sym]))}, :name cljs.analyzer/missing-use-macro?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 25, :method-params ([lib sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1764, :end-line 1764, :max-fixed-arity 2, :fn-var true, :arglists (quote ([lib sym]))}, CLJ_NIL_SYM {:name cljs.analyzer/CLJ_NIL_SYM, :file "out/cljs/analyzer.cljc", :line 175, :column 4, :end-line 175, :end-column 20, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 175, :column 9, :end-line 175, :end-column 20}}, resolve-symbol {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2926, :column 7, :end-line 2926, :end-column 21, :arglists (quote ([s]))}, :name cljs.analyzer/resolve-symbol, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 21, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2926, :end-line 2926, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, missing-renames {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1781, :column 7, :end-line 1781, :end-column 22, :arglists (quote ([renames env]))}, :name cljs.analyzer/missing-renames, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 22, :method-params ([renames env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1781, :end-line 1781, :max-fixed-arity 2, :fn-var true, :arglists (quote ([renames env]))}, *cljs-macros-path* {:name cljs.analyzer/*cljs-macros-path*, :file "out/cljs/analyzer.cljc", :line 48, :column 1, :end-line 48, :end-column 34, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 48, :column 16, :end-line 48, :end-column 34, :dynamic true}}, confirm-var-exist-warning {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 648, :column 7, :end-line 648, :end-column 32, :arglists (quote ([env prefix suffix]))}, :name cljs.analyzer/confirm-var-exist-warning, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 32, :method-params ([env prefix suffix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 648, :end-line 648, :max-fixed-arity 3, :fn-var true, :arglists (quote ([env prefix suffix]))}, repeat-char {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 421, :column 8, :end-line 421, :end-column 19, :private true, :arglists (quote ([c n]))}, :private true, :name cljs.analyzer/repeat-char, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 19, :method-params ([c n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 421, :end-line 421, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c n]))}, analyze-dot {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2366, :column 7, :end-line 2366, :end-column 18, :arglists (quote ([env target field member+ form]))}, :name cljs.analyzer/analyze-dot, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 18, :method-params ([env target field member+ form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2366, :end-line 2366, :max-fixed-arity 5, :fn-var true, :arglists (quote ([env target field member+ form]))}, analyze-do-statements {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1482, :column 7, :end-line 1482, :end-column 28, :arglists (quote ([env exprs]))}, :name cljs.analyzer/analyze-do-statements, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 28, :method-params ([env exprs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1482, :end-line 1482, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env exprs]))}, get-line {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 520, :column 7, :end-line 520, :end-column 15, :arglists (quote ([x env]))}, :name cljs.analyzer/get-line, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 15, :method-params ([x env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 520, :end-line 520, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x env]))}, analyze-do-statements* {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1479, :column 7, :end-line 1479, :end-column 29, :arglists (quote ([env exprs]))}, :name cljs.analyzer/analyze-do-statements*, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 29, :method-params ([env exprs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1479, :end-line 1479, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env exprs]))}, analyze-seq {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2716, :column 7, :end-line 2716, :end-column 18, :arglists (quote ([env form name] [env form name opts])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([env form name] [env form name opts]), :arglists ([env form name] [env form name opts]), :arglists-meta (nil nil)}}, :name cljs.analyzer/analyze-seq, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([env form name] [env form name opts]), :arglists ([env form name] [env form name opts]), :arglists-meta (nil nil)}, :method-params ([env form name] [env form name opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2716, :end-line 2716, :max-fixed-arity 4, :fn-var true, :arglists ([env form name] [env form name opts])}, all-values? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2498, :column 8, :end-line 2498, :end-column 19, :private true, :arglists (quote ([exprs])), :tag boolean}, :private true, :name cljs.analyzer/all-values?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 19, :method-params ([exprs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2498, :ret-tag boolean, :end-line 2498, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([exprs]))}, find-def-clash {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2132, :column 7, :end-line 2132, :end-column 21, :arglists (quote ([env ns segments]))}, :name cljs.analyzer/find-def-clash, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 21, :method-params ([env ns segments]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2132, :end-line 2132, :max-fixed-arity 3, :fn-var true, :arglists (quote ([env ns segments]))}, get-expander* {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2605, :column 7, :end-line 2605, :end-column 20, :arglists (quote ([sym env]))}, :name cljs.analyzer/get-expander*, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 20, :method-params ([sym env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2605, :end-line 2605, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sym env]))}, fn-name-var {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1339, :column 7, :end-line 1339, :end-column 18, :arglists (quote ([env locals name]))}, :name cljs.analyzer/fn-name-var, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 18, :method-params ([env locals name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1339, :end-line 1339, :max-fixed-arity 3, :fn-var true, :arglists (quote ([env locals name]))}, *load-macros* {:name cljs.analyzer/*load-macros*, :file "out/cljs/analyzer.cljc", :line 53, :column 1, :end-line 53, :end-column 29, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 53, :column 16, :end-line 53, :end-column 29, :dynamic true}}, excluded? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2576, :column 7, :end-line 2576, :end-column 16, :arglists (quote ([env sym])), :tag boolean}, :name cljs.analyzer/excluded?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 16, :method-params ([env sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2576, :ret-tag boolean, :end-line 2576, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([env sym]))}, empty-env {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 578, :column 7, :end-line 578, :end-column 16, :arglists (quote ([])), :doc "Construct an empty analysis environment. Required to analyze forms."}, :name cljs.analyzer/empty-env, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 578, :end-line 578, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Construct an empty analysis environment. Required to analyze forms."}, default-warning-handler {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 405, :column 7, :end-line 405, :end-column 30, :arglists (quote ([warning-type env extra]))}, :name cljs.analyzer/default-warning-handler, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 30, :method-params ([warning-type env extra]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 405, :end-line 405, :max-fixed-arity 3, :fn-var true, :arglists (quote ([warning-type env extra]))}, resolve-ns-alias {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 693, :column 7, :end-line 693, :end-column 23, :arglists (quote ([env name] [env name default])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([env name] [env name default]), :arglists ([env name] [env name default]), :arglists-meta (nil nil)}}, :name cljs.analyzer/resolve-ns-alias, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([env name] [env name default]), :arglists ([env name] [env name default]), :arglists-meta (nil nil)}, :method-params ([env name] [env name default]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 693, :end-line 693, :max-fixed-arity 3, :fn-var true, :arglists ([env name] [env name default])}, intern-macros {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 526, :column 7, :end-line 526, :end-column 20, :arglists (quote ([ns] [ns reload])), :doc "Given a Clojure namespace intern all macros into the ambient ClojureScript\n   analysis environment.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ns] [ns reload]), :arglists ([ns] [ns reload]), :arglists-meta (nil nil)}}, :name cljs.analyzer/intern-macros, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ns] [ns reload]), :arglists ([ns] [ns reload]), :arglists-meta (nil nil)}, :method-params ([ns] [ns reload]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 526, :end-line 526, :max-fixed-arity 2, :fn-var true, :arglists ([ns] [ns reload]), :doc "Given a Clojure namespace intern all macros into the ambient ClojureScript\n   analysis environment."}, BOOLEAN_OR_SEQ {:name cljs.analyzer/BOOLEAN_OR_SEQ, :file "out/cljs/analyzer.cljc", :line 925, :column 1, :end-line 925, :end-column 20, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 925, :column 6, :end-line 925, :end-column 20}}, *macro-infer* {:name cljs.analyzer/*macro-infer*, :file "out/cljs/analyzer.cljc", :line 55, :column 1, :end-line 55, :end-column 29, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 55, :column 16, :end-line 55, :end-column 29, :dynamic true}}, DOT_SYM {:name cljs.analyzer/DOT_SYM, :file "out/cljs/analyzer.cljc", :line 189, :column 4, :end-line 189, :end-column 16, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 189, :column 9, :end-line 189, :end-column 16}}, gen-constant-id {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 436, :column 7, :end-line 436, :end-column 22, :arglists (quote ([value]))}, :name cljs.analyzer/gen-constant-id, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 22, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 436, :end-line 436, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, BOOLEAN_SYM {:name cljs.analyzer/BOOLEAN_SYM, :file "out/cljs/analyzer.cljc", :line 183, :column 1, :end-line 183, :end-column 17, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 183, :column 6, :end-line 183, :end-column 17}}, macro-autoload-ns? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2027, :column 7, :end-line 2027, :end-column 25, :arglists (quote ([form])), :doc "Given a spec form check whether the spec namespace requires a macro file\n   of the same name. If so return true.", :tag boolean}, :name cljs.analyzer/macro-autoload-ns?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 25, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2027, :ret-tag boolean, :end-line 2027, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([form])), :doc "Given a spec form check whether the spec namespace requires a macro file\n   of the same name. If so return true."}, get-tag {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 884, :column 7, :end-line 884, :end-column 14, :arglists (quote ([e]))}, :name cljs.analyzer/get-tag, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 14, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 884, :end-line 884, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, implicit-nses {:name cljs.analyzer/implicit-nses, :file "out/cljs/analyzer.cljc", :line 639, :column 1, :end-line 639, :end-column 19, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 639, :column 6, :end-line 639, :end-column 19}}, valid-proto {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1136, :column 7, :end-line 1136, :end-column 18, :arglists (quote ([x]))}, :name cljs.analyzer/valid-proto, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1136, :end-line 1136, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, parse-ns {:name cljs.analyzer/parse-ns, :file "out/cljs/analyzer.cljc", :line 2025, :column 1, :end-line 2025, :end-column 18, :declared true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2025, :column 10, :end-line 2025, :end-column 18, :declared true}}, analyze-list {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2748, :column 7, :end-line 2748, :end-column 19, :arglists (quote ([env form]))}, :name cljs.analyzer/analyze-list, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 19, :method-params ([env form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2748, :end-line 2748, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env form]))}, warning {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 612, :column 7, :end-line 612, :end-column 14, :arglists (quote ([warning-type env extra]))}, :name cljs.analyzer/warning, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 14, :method-params ([warning-type env extra]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 612, :end-line 612, :max-fixed-arity 3, :fn-var true, :arglists (quote ([warning-type env extra]))}, implicit-import? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 641, :column 7, :end-line 641, :end-column 23, :arglists (quote ([env prefix suffix])), :tag boolean}, :name cljs.analyzer/implicit-import?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 23, :method-params ([env prefix suffix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 641, :ret-tag boolean, :end-line 641, :max-fixed-arity 3, :tag boolean, :fn-var true, :arglists (quote ([env prefix suffix]))}, missing-use-macros {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1786, :column 7, :end-line 1786, :end-column 25, :arglists (quote ([use-macros env]))}, :name cljs.analyzer/missing-use-macros, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 25, :method-params ([use-macros env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1786, :end-line 1786, :max-fixed-arity 2, :fn-var true, :arglists (quote ([use-macros env]))}, analyze* {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2891, :column 7, :end-line 2891, :end-column 15, :arglists (quote ([env form name opts]))}, :name cljs.analyzer/analyze*, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 15, :method-params ([env form name opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2891, :end-line 2891, :max-fixed-arity 4, :fn-var true, :arglists (quote ([env form name opts]))}, -cljs-macros-loaded {:name cljs.analyzer/-cljs-macros-loaded, :file "out/cljs/analyzer.cljc", :line 102, :column 1, :end-line 102, :end-column 25, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 102, :column 6, :end-line 102, :end-column 25}}, check-uses {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1799, :column 7, :end-line 1799, :end-column 17, :arglists (quote ([uses env]))}, :name cljs.analyzer/check-uses, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 17, :method-params ([uses env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1799, :end-line 1799, :max-fixed-arity 2, :fn-var true, :arglists (quote ([uses env]))}, find-matching-method {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 893, :column 7, :end-line 893, :end-column 27, :arglists (quote ([f params]))}, :name cljs.analyzer/find-matching-method, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 27, :method-params ([f params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 893, :end-line 893, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f params]))}, *cljs-file* {:name cljs.analyzer/*cljs-file*, :file "out/cljs/analyzer.cljc", :line 45, :column 1, :end-line 45, :end-column 27, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 45, :column 16, :end-line 45, :end-column 27, :dynamic true}}, CLJS_CORE_MACROS_SYM {:name cljs.analyzer/CLJS_CORE_MACROS_SYM, :file "out/cljs/analyzer.cljc", :line 198, :column 4, :end-line 198, :end-column 29, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 198, :column 9, :end-line 198, :end-column 29}}, *file-defs* {:name cljs.analyzer/*file-defs*, :file "out/cljs/analyzer.cljc", :line 57, :column 1, :end-line 57, :end-column 27, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 57, :column 16, :end-line 57, :end-column 27, :dynamic true}}, infer-if {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 927, :column 7, :end-line 927, :end-column 15, :arglists (quote ([env e]))}, :name cljs.analyzer/infer-if, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 15, :method-params ([env e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 927, :end-line 927, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env e]))}, topo-sort {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 233, :column 10, :end-line 233, :end-column 19, :arglists (quote ([x get-deps] [x depth state memo-get-deps])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([x get-deps] [x depth state memo-get-deps]), :arglists ([x get-deps] [x depth state memo-get-deps]), :arglists-meta (nil nil)}}, :name cljs.analyzer/topo-sort, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([x get-deps] [x depth state memo-get-deps]), :arglists ([x get-deps] [x depth state memo-get-deps]), :arglists-meta (nil nil)}, :method-params ([x get-deps] [x depth state memo-get-deps]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 233, :end-line 233, :max-fixed-arity 4, :fn-var true, :arglists ([x get-deps] [x depth state memo-get-deps])}, *verbose* {:name cljs.analyzer/*verbose*, :file "out/cljs/analyzer.cljc", :line 100, :column 1, :end-line 100, :end-column 25, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 100, :column 16, :end-line 100, :end-column 25, :dynamic true}}, analyze-js-value {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2766, :column 7, :end-line 2766, :end-column 23, :arglists (quote ([env form]))}, :name cljs.analyzer/analyze-js-value, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 23, :method-params ([env form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2766, :end-line 2766, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env form]))}, source-info {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 592, :column 7, :end-line 592, :end-column 18, :arglists (quote ([env] [name env])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([env] [name env]), :arglists ([env] [name env]), :arglists-meta (nil nil)}}, :name cljs.analyzer/source-info, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([env] [name env]), :arglists ([env] [name env]), :arglists-meta (nil nil)}, :method-params ([env] [name env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 592, :end-line 592, :max-fixed-arity 2, :fn-var true, :arglists ([env] [name env])}, analyze-fn-method-param {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1280, :column 7, :end-line 1280, :end-column 30, :arglists (quote ([env]))}, :name cljs.analyzer/analyze-fn-method-param, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 30, :method-params ([env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1280, :end-line 1280, :max-fixed-arity 1, :fn-var true, :arglists (quote ([env]))}, analyze-set {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2760, :column 7, :end-line 2760, :end-column 18, :arglists (quote ([env form]))}, :name cljs.analyzer/analyze-set, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 18, :method-params ([env form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2760, :end-line 2760, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env form]))}, numeric-type? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2429, :column 7, :end-line 2429, :end-column 20, :arglists (quote ([t])), :tag boolean}, :name cljs.analyzer/numeric-type?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 20, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2429, :ret-tag boolean, :end-line 2429, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([t]))}, munge-path {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 221, :column 10, :end-line 221, :end-column 20, :arglists (quote ([ss]))}, :name cljs.analyzer/munge-path, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 20, :method-params ([ss]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 221, :end-line 221, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ss]))}, ast? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 248, :column 7, :end-line 248, :end-column 11, :arglists (quote ([x])), :tag boolean}, :name cljs.analyzer/ast?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 248, :ret-tag boolean, :end-line 248, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, parse-require-spec {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1964, :column 7, :end-line 1964, :end-column 25, :arglists (quote ([env macros? deps aliases spec]))}, :name cljs.analyzer/parse-require-spec, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 25, :method-params ([env macros? deps aliases spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1964, :end-line 1964, :max-fixed-arity 5, :fn-var true, :arglists (quote ([env macros? deps aliases spec]))}, analyze-wrap-meta {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2785, :column 7, :end-line 2785, :end-column 24, :arglists (quote ([expr]))}, :name cljs.analyzer/analyze-wrap-meta, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 24, :method-params ([expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2785, :end-line 2785, :max-fixed-arity 1, :fn-var true, :arglists (quote ([expr]))}, ANY_SYM {:name cljs.analyzer/ANY_SYM, :file "out/cljs/analyzer.cljc", :line 202, :column 1, :end-line 202, :end-column 13, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 202, :column 6, :end-line 202, :end-column 13}}, property-symbol? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2302, :column 16, :end-line 2302, :end-column 32, :private true}, :private true, :name cljs.analyzer/property-symbol?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 32, :method-params ([p1__8983#]), :protocol-impl nil, :arglists-meta (), :column 1, :line 2302, :end-line 2302, :max-fixed-arity 1, :fn-var true, :arglists nil}, cljs-seq? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 205, :column 19, :end-line 205, :end-column 28, :tag boolean, :arglists (quote ([x]))}, :name cljs.analyzer/cljs-seq?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 28, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 205, :ret-tag boolean, :end-line 205, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, get-js-tag {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2397, :column 7, :end-line 2397, :end-column 17, :arglists (quote ([form]))}, :name cljs.analyzer/get-js-tag, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 17, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2397, :end-line 2397, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, parse {:name cljs.analyzer/parse, :file "out/cljs/analyzer.cljc", :line 999, :column 1, :end-line 999, :end-column 16, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 999, :column 11, :end-line 999, :end-column 16}}, *analyze-deps* {:name cljs.analyzer/*analyze-deps*, :file "out/cljs/analyzer.cljc", :line 51, :column 1, :end-line 51, :end-column 30, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 51, :column 16, :end-line 51, :end-column 30, :dynamic true}}, analyze-let-bindings* {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1521, :column 7, :end-line 1521, :end-column 28, :arglists (quote ([encl-env bindings]))}, :name cljs.analyzer/analyze-let-bindings*, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 28, :method-params ([encl-env bindings]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1521, :end-line 1521, :max-fixed-arity 2, :fn-var true, :arglists (quote ([encl-env bindings]))}, analysis-error? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 624, :column 7, :end-line 624, :end-column 22, :arglists (quote ([ex])), :tag boolean}, :name cljs.analyzer/analysis-error?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 22, :method-params ([ex]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 624, :ret-tag boolean, :end-line 624, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([ex]))}, valid-arity? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2503, :column 8, :end-line 2503, :end-column 20, :private true, :arglists (quote ([argc method-params])), :tag boolean}, :private true, :name cljs.analyzer/valid-arity?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 20, :method-params ([argc method-params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2503, :ret-tag boolean, :end-line 2503, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([argc method-params]))}, parse-ns-excludes {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1890, :column 7, :end-line 1890, :end-column 24, :arglists (quote ([env args]))}, :name cljs.analyzer/parse-ns-excludes, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 24, :method-params ([env args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1890, :end-line 1890, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env args]))}, analyze-fn-methods-pass2 {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1359, :column 7, :end-line 1359, :end-column 31, :arglists (quote ([menv locals type meths]))}, :name cljs.analyzer/analyze-fn-methods-pass2, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 31, :method-params ([menv locals type meths]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1359, :end-line 1359, :max-fixed-arity 4, :fn-var true, :arglists (quote ([menv locals type meths]))}, core-name? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 721, :column 7, :end-line 721, :end-column 17, :arglists (quote ([env sym])), :doc "Is sym visible from core in the current compilation namespace?", :tag boolean}, :name cljs.analyzer/core-name?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 17, :method-params ([env sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 721, :ret-tag boolean, :end-line 721, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([env sym])), :doc "Is sym visible from core in the current compilation namespace?"}, get-let-tag {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1512, :column 7, :end-line 1512, :end-column 18, :arglists (quote ([name init-expr]))}, :name cljs.analyzer/get-let-tag, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 18, :method-params ([name init-expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1512, :end-line 1512, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name init-expr]))}, specials {:name cljs.analyzer/specials, :file "out/cljs/analyzer.cljc", :line 863, :column 1, :end-line 863, :end-column 14, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 863, :column 6, :end-line 863, :end-column 14}}, resolve-macro-ns-alias {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 700, :column 7, :end-line 700, :end-column 29, :arglists (quote ([env name] [env name default])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([env name] [env name default]), :arglists ([env name] [env name default]), :arglists-meta (nil nil)}}, :name cljs.analyzer/resolve-macro-ns-alias, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([env name] [env name default]), :arglists ([env name] [env name default]), :arglists-meta (nil nil)}, :method-params ([env name] [env name default]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 700, :end-line 700, :max-fixed-arity 3, :fn-var true, :arglists ([env name] [env name default])}, confirm-ns {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 707, :column 7, :end-line 707, :end-column 17, :arglists (quote ([env ns-sym])), :doc "Given env, an analysis environment, and ns-sym, a symbol identifying a\n   namespace, confirm that the namespace exists. Warn if not found."}, :name cljs.analyzer/confirm-ns, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 17, :method-params ([env ns-sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 707, :end-line 707, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env ns-sym])), :doc "Given env, an analysis environment, and ns-sym, a symbol identifying a\n   namespace, confirm that the namespace exists. Warn if not found."}, default-namespaces {:name cljs.analyzer/default-namespaces, :file "out/cljs/analyzer.cljc", :line 476, :column 1, :end-line 476, :end-column 24, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 476, :column 6, :end-line 476, :end-column 24}}, CLJS_CORE_SYM {:name cljs.analyzer/CLJS_CORE_SYM, :file "out/cljs/analyzer.cljc", :line 195, :column 4, :end-line 195, :end-column 22, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 195, :column 9, :end-line 195, :end-column 22}}, build-method-call {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2329, :column 8, :end-line 2329, :end-column 25, :private true, :arglists (quote ([target meth args])), :doc "Builds the intermediate method call map used to reason about the parsed form during\n  compilation."}, :private true, :name cljs.analyzer/build-method-call, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 25, :method-params ([target meth args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2329, :end-line 2329, :max-fixed-arity 3, :fn-var true, :arglists (quote ([target meth args])), :doc "Builds the intermediate method call map used to reason about the parsed form during\n  compilation."}, confirm-var-exists-throw {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 687, :column 7, :end-line 687, :end-column 31, :arglists (quote ([]))}, :name cljs.analyzer/confirm-var-exists-throw, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 31, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 687, :end-line 687, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, analyze-form {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 2871, :column 10, :end-line 2871, :end-column 22, :arglists (quote ([env form name opts]))}, :name cljs.analyzer/analyze-form, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 22, :method-params ([env form name opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 2871, :end-line 2871, :max-fixed-arity 4, :fn-var true, :arglists (quote ([env form name opts]))}, var-ast {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 1001, :column 8, :end-line 1001, :end-column 15, :private true, :arglists (quote ([env sym]))}, :private true, :name cljs.analyzer/var-ast, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 15, :method-params ([env sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1001, :end-line 1001, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env sym]))}, error {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 616, :column 7, :end-line 616, :end-column 12, :arglists (quote ([env msg] [env msg cause])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([env msg] [env msg cause]), :arglists ([env msg] [env msg cause]), :arglists-meta (nil nil)}}, :name cljs.analyzer/error, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([env msg] [env msg cause]), :arglists ([env msg] [env msg cause]), :arglists-meta (nil nil)}, :method-params ([env msg] [env msg cause]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 616, :end-line 616, :max-fixed-arity 3, :fn-var true, :arglists ([env msg] [env msg cause])}, cljs-vector? {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 213, :column 19, :end-line 213, :end-column 31, :tag boolean, :arglists (quote ([x]))}, :name cljs.analyzer/cljs-vector?, :variadic false, :file "out/cljs/analyzer.cljc", :end-column 31, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 213, :ret-tag boolean, :end-line 213, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, *cljs-ns* {:name cljs.analyzer/*cljs-ns*, :file "out/cljs/analyzer.cljc", :line 44, :column 1, :end-line 44, :end-column 25, :dynamic true, :meta {:file "/Users/clumsyjedi/workspace/clack/out/cljs/analyzer.cljc", :line 44, :column 16, :end-line 44, :end-column 25, :dynamic true}}}, :require-macros {cljs.analyzer.macros cljs.analyzer.macros, cljs.env.macros cljs.env.macros}, :cljs.analyzer/constants {:seen #{:args :invoke-ctor & seq :rename-macros console :renames case* :extending-base-js-type :cljs.analyzer/namespaces :unsupported-preprocess-value defrecord* :argc :finally :statement js/Function :suffix cljs.core/PersistentHashMap try :fns :ret :redef :fexpr :children :var-special :exclude cljs.core/when :ctor :recurs :js :fname clj boolean cljs.core/IVector location :let :v :protocol-inline :fn :unsupported-js-module-type object :goog :only :invalid-protocol-symbol :done :group :meta :ev cljs.core$macros :frame cljs.core/IList meta8286 :fn-scope :do :macros-ns :pmasks :init :cljs.analyzer/property :numeric :exprs :else :protocol-duped-method :protocol-symbol :cblocks any :protocol :cljs.analyzer/symbol :if escape :use-macros :excludes :macros :locals :tests :js-globals :return finally cljs.core/Keyword :method :use :segs :default :num-fields goog.string :cljs.analyzer/call :new loop* :protocols :ns :bindings :def-emits-var :name :munged-namespace :binding-form? :as cljs.core/Object :variadic :flag :constant :loop-lets :unchecked cljs.core :file :fields js cljs.core/ISet :undeclared-macros-ns long double :end-column :single-segment-namespace __hash :start screen :fn-arity :top-fn :require :params :macro-present? goog :js-value :dblock :js-module-index :fn-self-name :deftype* js/Boolean :val :recur :field :type .-cljs$lang$test goog.object js/String do __meta :state :method-params :rename number :vals :js-dependency-index :ns-name :protocol-impl :op :current-symbol :source :js-provide :env :cljs.analyzer/type :letfn :vector :variadic-max-arity letfn* :export :cljs.analyzer/analyzed :protocol-with-variadic-method if :js-type :arglists-meta :array :imports :cljs.analyzer/protocol-inline global :cljs.analyzer/constant-table new :fn-deprecated :merge ns :sym :no-op :catches :prefix :column unquote :types :cljs.analyzer/protocol-impl :loop :dot-action :undeclared-var :internal-ctor :module-type cljs.core/List :root-source-info cljs.core/let process :cljs.analyzer/expr :include-macros :requires :preamble-missing require cljs.core/cond :cljs.analyzer/set-unchecked-if :unsynchronized-mutable :const :cljs.analyzer/access :keys deftype* let* js/Array :thens :set! :methods not-native js* :undeclared-protocol-symbol alert :seen :dynamic :line :expr :list :var history fn* :cljs/analysis-error :protocol-info recur :macro :unprovided :deprecation-nowarn Math :ns-var-clash :deprecated :uses :undeclared-ns :preprocess :catch :recur-frames window :record array :defs string :quoted? :declared :cljs.analyzer/not-found :lib module :info :code :ret-tag :cljs.analyzer/error function :then ignore :def-var :end-line :cljs.analyzer/no-resolve :js-op exports :var-ast :context :invoke :throw :reload :undeclared-ns-form :order :f :no-such-method :refer-clojure document :def :reload-all :require-macros :max-fixed-arity :t :case* set! :form :missing :tag :invalid-arithmetic :cljc :dot :protocol-deprecated :target cljs.repl . var :mutable :reloads quote :cljs.analyzer/constants :try cljs.core/Symbol :set :items :fn-var :defrecord* :arglists :volatile-mutable :import :impls :hierarchy catch :shadow js/Object :body :ns-sym :doc :overload-arity :local :closure-lib :cljs.analyzer/numeric goog.array :protocol-multiple-impls navigator :jsdoc js/Number :redef-in-file :clj :protocol-invalid-method :invalid-arity :cljs :extend-type-invalid-method-shape :suggested-symbol :map __extmap :cljs.analyzer/list :object :test :foreign :multiple-variadic-overloads *unchecked-if* throw :forms :fblock cljs.core/IMap :dep-path clj-nil cljs.core/instance? :deps :refer :statements def :refer-macros cljs.user unescape}, :order [cljs.user :dep-path :invoke-ctor :extending-base-js-type :unsupported-preprocess-value :redef :unsupported-js-module-type :invalid-protocol-symbol :protocol-duped-method :munged-namespace :single-segment-namespace :fn-arity :variadic-max-arity :protocol-with-variadic-method :fn-deprecated :undeclared-var :preamble-missing :undeclared-protocol-symbol :dynamic :unprovided :ns-var-clash :undeclared-ns :undeclared-ns-form :invalid-arithmetic :protocol-deprecated :fn-var :overload-arity :protocol-multiple-impls :redef-in-file :protocol-invalid-method :extend-type-invalid-method-shape :multiple-variadic-overloads clj-nil number string boolean js* . new cljs.core cljs.core$macros ignore any :cljs :op :hierarchy :default :missing :macro-present? :prefix :suffix :ns-sym :js-provide :cljc :undeclared-macros-ns :clj :name :sym :ns :ns-name :line :argc :ctor :info :fexpr :type :lib :protocol :no-such-method :fname :invalid-arity :current-symbol :suggested-symbol :js-op :types :var :method :module-type :file :preprocess :else :cljs.analyzer/constant-table :cljs.analyzer/namespaces :cljs.analyzer/constants :seen :order meta8286 :column :macros :macro :context :locals :fn-scope :js-globals :statement alert window document console escape unescape screen location navigator history global process require module exports :root-source-info :tag :cljs/analysis-error goog.string goog goog.object Math goog.array :requires :imports unquote :defs :require-macros :excludes js :uses :renames :cljs.analyzer/no-resolve :ev :use-macros :rename-macros & case* defrecord* try loop* do letfn* if ns deftype* let* fn* recur set! var quote throw def :env :form :constant cljs.core/Keyword :methods :max-fixed-arity :variadic :protocol-symbol cljs.core/PersistentHashMap cljs.core/List clj not-native seq :test :then :f :ret-tag :args :expr :ret :init :meta :doc cljs.core/when .-cljs$lang$test :arglists :arglists-meta :var-special :unchecked :children :if :const :v :tests :thens :case* :throw :return catch finally :state :forms :body :cblocks :dblock :fblock :start :catches :finally :done cljs.core/let cljs.core/cond cljs.core/instance? :try :catch :declared :fn :export :impls :protocol-info :params :protocol-impl :protocol-inline :top-fn :method-params :jsdoc :def :def-var :def-emits-var :var-ast :binding-form? :shadow :flag :recurs :fn-self-name :cljs.analyzer/type :cljs.analyzer/protocol-impl :cljs.analyzer/protocol-inline :loop-lets :recur-frames function :local :bindings :letfn :statements :do :loop :let :recur :frame :exprs :quoted? :record :internal-ctor :num-fields :new js/Object js/String js/Array js/Number js/Function js/Boolean object array *unchecked-if* :cljs.analyzer/set-unchecked-if :field :mutable :unsynchronized-mutable :volatile-mutable :no-op :target :val :set! :js-dependency-index :foreign :cljs.analyzer/not-found :group :goog :closure-lib :as :rename :refer :refer-clojure :exclude :only :js-module-index :require :use :fns :import :include-macros :refer-macros :reload :reload-all :macros-ns :merge :deps :reloads :defrecord* __meta __extmap __hash :protocols :t :fields :pmasks cljs.core/Object :deftype* :cljs.analyzer/error :cljs.analyzer/expr :cljs.analyzer/property :cljs.analyzer/symbol :cljs.analyzer/list :dot-action :cljs.analyzer/access :cljs.analyzer/call :dot :numeric long double :segs :js :code :cljs.analyzer/analyzed :deprecated :deprecation-nowarn :invoke cljs.core/Symbol cljs.repl :cljs.analyzer/numeric :keys :vals :map cljs.core/IMap :items :list cljs.core/IList :vector cljs.core/IVector :set cljs.core/ISet :js-type :js-value :object :array :end-column :end-line :source]}, :doc nil}