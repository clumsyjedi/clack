{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name clack.util, :imports nil, :requires {cljs.js cljs.js, cljs.tools.reader cljs.tools.reader, cljs.pprint cljs.pprint, transit cognitect.transit, cognitect.transit cognitect.transit, s clojure.string, clojure.string clojure.string}, :uses {pprint cljs.pprint, eval cljs.js, empty-state cljs.js, read-string cljs.tools.reader, js-eval cljs.js}, :defs {formats {:name clack.util/formats, :file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :line 8, :column 10, :end-line 8, :end-column 17}}, error {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :line 12, :column 7, :end-line 12, :end-column 12, :arglists (quote ([msg])), :doc "log error and exit with error code"}, :name clack.util/error, :variadic false, :file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :end-column 12, :method-params ([msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg])), :doc "log error and exit with error code"}, slurp {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :line 18, :column 7, :end-line 18, :end-column 12, :arglists (quote ([filename]))}, :name clack.util/slurp, :variadic false, :file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :end-column 12, :method-params ([filename]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([filename]))}, eval* {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :line 22, :column 7, :end-line 22, :end-column 12, :arglists (quote ([s])), :doc "evaluate string"}, :name clack.util/eval*, :variadic false, :file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "evaluate string"}, input-format {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :line 33, :column 7, :end-line 33, :end-column 19, :arglists (quote ([meta]))}, :name clack.util/input-format, :variadic false, :file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :end-column 19, :method-params ([meta]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([meta]))}, output-format {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :line 36, :column 7, :end-line 36, :end-column 20, :arglists (quote ([meta]))}, :name clack.util/output-format, :variadic false, :file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :end-column 20, :method-params ([meta]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([meta]))}}, :require-macros {cljs.js cljs.js, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:js :input-format :output-format :expr :tjs :transit :edn :source-map :context :json :transit-js :eval}, :order [:js :json :transit :transit-js :tjs :edn :eval :source-map :context :expr :input-format :output-format]}, :doc nil}