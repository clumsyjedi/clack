;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name clack.util, :imports nil, :requires {cljs.tools.reader cljs.tools.reader, cljs.js cljs.js, cljs.pprint cljs.pprint, transit cognitect.transit, cognitect.transit cognitect.transit}, :uses {pprint cljs.pprint, eval cljs.js, empty-state cljs.js, read-string cljs.tools.reader, js-eval cljs.js}, :defs {error {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :line 7, :column 7, :end-line 7, :end-column 12, :arglists (quote ([msg])), :doc "log error and exit with error code"}, :name clack.util/error, :variadic false, :file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :end-column 12, :method-params ([msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg])), :doc "log error and exit with error code"}, slurp {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :line 13, :column 7, :end-line 13, :end-column 12, :arglists (quote ([filename]))}, :name clack.util/slurp, :variadic false, :file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :end-column 12, :method-params ([filename]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([filename]))}, eval* {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :line 17, :column 7, :end-line 17, :end-column 12, :arglists (quote ([s])), :doc "evaluate string"}, :name clack.util/eval*, :variadic false, :file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "evaluate string"}, find-encoding {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :line 28, :column 8, :end-line 28, :end-column 21, :private true, :arglists (quote ([enc]))}, :private true, :name clack.util/find-encoding, :variadic false, :file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :end-column 21, :method-params ([enc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([enc]))}, read-input {:name clack.util/read-input, :file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :line 34, :column 1, :end-line 34, :end-column 21, :meta {:file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :line 34, :column 11, :end-line 34, :end-column 21}}, write-output {:name clack.util/write-output, :file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :line 49, :column 1, :end-line 49, :end-column 23, :meta {:file "/Users/clumsyjedi/workspace/clack/src/clack/util.cljs", :line 49, :column 11, :end-line 49, :end-column 23}}}, :require-macros {cljs.js cljs.js, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:js :default :expr :tjs :transit :edn :source-map :context :json :transit-js :hierarchy :eval}, :order [:eval :source-map :context :expr :js :json :transit :transit-js :tjs :edn :hierarchy :default]}, :doc nil}