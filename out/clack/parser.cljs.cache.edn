{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name clack.parser, :imports nil, :requires {edn clack.parser.edn, clack.parser.edn clack.parser.edn, json clack.parser.json, clack.parser.json clack.parser.json, transit clack.parser.transit, clack.parser.transit clack.parser.transit, clack.parser.protocol clack.parser.protocol}, :uses {handle-input clack.parser.protocol}, :defs {parser {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/src/clack/parser.cljs", :line 7, :column 8, :end-line 7, :end-column 14, :private true, :arglists (quote ([input-type]))}, :private true, :name clack.parser/parser, :variadic false, :file "src/clack/parser.cljs", :end-column 14, :method-params ([input-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([input-type]))}, parse {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/src/clack/parser.cljs", :line 13, :column 7, :end-line 13, :end-column 12, :arglists (quote ([input-type stream complete-fn]))}, :name clack.parser/parse, :variadic false, :file "src/clack/parser.cljs", :end-column 12, :method-params ([input-type stream complete-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 3, :fn-var true, :arglists (quote ([input-type stream complete-fn]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:tjs :json}, :order [:json :tjs]}, :doc nil}