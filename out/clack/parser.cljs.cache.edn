{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name clack.parser, :imports nil, :requires {clack.parser.string clack.parser.string, json clack.parser.json, clack.parser.edn clack.parser.edn, clack.parser.json clack.parser.json, string clack.parser.string, yaml clack.parser.yaml, transit clack.parser.transit, clack.parser.transit clack.parser.transit, edn clack.parser.edn, clack.parser.protocol clack.parser.protocol, clack.parser.yaml clack.parser.yaml}, :uses {handle-input clack.parser.protocol}, :defs {parser {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/src/clack/parser.cljs", :line 9, :column 8, :end-line 9, :end-column 14, :private true, :arglists (quote ([input-type]))}, :private true, :name clack.parser/parser, :variadic false, :file "src/clack/parser.cljs", :end-column 14, :method-params ([input-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([input-type]))}, parse {:protocol-inline nil, :meta {:file "/Users/clumsyjedi/workspace/clack/src/clack/parser.cljs", :line 17, :column 7, :end-line 17, :end-column 12, :arglists (quote ([input-type stream complete-fn keywordize?]))}, :name clack.parser/parse, :variadic false, :file "src/clack/parser.cljs", :end-column 12, :method-params ([input-type stream complete-fn keywordize?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 4, :fn-var true, :arglists (quote ([input-type stream complete-fn keywordize?]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:yaml :str :tjs :json}, :order [:json :str :tjs :yaml]}, :doc nil}